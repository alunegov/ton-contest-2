// automatically generated from `/mnt/c/Work3/ton/crypto/smartcont/stdlib.fc` `code.fc` 
PROGRAM{
  DECLPROC load_data
  DECLPROC save_data
  DECLPROC unpack_round
  DECLPROC pack_round
  DECLPROC unpack_old_round
  DECLPROC pack_old_round
  DECLPROC send_message_back
  DECLPROC buy_ticket
  DECLPROC comment_to_nums
  DECLPROC sponsor_prize_fund
  DECLPROC withdraw_prize
  DECLPROC conduct_round
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  79045 DECLMETHOD prize_fund
  70745 DECLMETHOD participants
  84929 DECLMETHOD lucky_nums
  70622 DECLMETHOD prizes
  101330 DECLMETHOD is_winner_s
  118635 DECLMETHOD is_winner
  98949 DECLMETHOD comsa
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    LDDICT	//  _4 ds
    LDDICT	//  _4 _6 ds
    LDDICT	//  _4 _6 _8 ds
    LDGRAMS	//  _4 _6 _8 _10 ds
    32 LDU	//  _4 _6 _8 _10 _12 ds
    256 LDU	//  res res res res res res ds
    ENDS
  }>
  save_data PROC:<{
    //  round old_round old_winners comsa seqno owner
    s0 s5 XCHG
    NEWC	//  owner old_round old_winners comsa seqno round _6
    STDICT	//  owner old_round old_winners comsa seqno _7
    s1 s4 XCHG	//  owner seqno old_winners comsa old_round _7
    STDICT	//  owner seqno old_winners comsa _8
    s1 s2 XCHG	//  owner seqno comsa old_winners _8
    STDICT	//  owner seqno comsa _9
    SWAP	//  owner seqno _9 comsa
    STGRAMS	//  owner seqno _10
    32 STU	//  owner _12
    256 STU	//  _14
    ENDC	//  _15
    c4 POP
  }>
  unpack_round PROC:<{
    //  round
    DUP	//  round round
    ISNULL	//  round _1
    IFJMP:<{	//  round
      DROP	// 
      0 PUSHINT	//  _2=0
      NEWDICT	//  _2=0 _3
    }>	//  round
    CTOS	//  ds
    LDGRAMS	//  _7 ds
    LDDICT	//  res res ds
    ENDS
  }>
  pack_round PROC:<{
    //  prize_fund participants
    NEWC
    ROT	//  participants _2 prize_fund
    STGRAMS	//  participants _3
    STDICT	//  _4
    ENDC	//  _5
  }>
  unpack_old_round PROC:<{
    //  old_round
    CTOS	//  ds
    LDDICT	//  _4 ds
    LDGRAMS	//  _4 _6 ds
    LDGRAMS	//  _4 _6 _8 ds
    LDGRAMS	//  res res res res ds
    ENDS
  }>
  pack_old_round PROC:<{
    //  lucky_nums prize1 prize2 prize3
    s0 s3 XCHG
    NEWC	//  prize3 prize1 prize2 lucky_nums _4
    STDICT	//  prize3 prize1 prize2 _5
    ROT	//  prize3 prize2 _5 prize1
    STGRAMS	//  prize3 prize2 _6
    SWAP	//  prize3 _6 prize2
    STGRAMS	//  prize3 _7
    SWAP	//  _7 prize3
    STGRAMS	//  _8
    ENDC	//  _9
  }>
  send_message_back PROC:<{
    //  addr ans_tag query_id body grams mode
    0 PUSHINT	//  addr ans_tag query_id body grams mode _7=0
    24 PUSHINT	//  addr ans_tag query_id body grams mode _7=0 _8=24
    NEWC	//  addr ans_tag query_id body grams mode _7=0 _8=24 _9
    6 STU	//  addr ans_tag query_id body grams mode _7=0 _11
    s0 s7 XCHG2	//  _7=0 ans_tag query_id body grams mode _11 addr
    STSLICER	//  _7=0 ans_tag query_id body grams mode _12
    ROT	//  _7=0 ans_tag query_id body mode _12 grams
    STGRAMS	//  _7=0 ans_tag query_id body mode _13
    s1 s5 XCHG	//  mode ans_tag query_id body _7=0 _13
    107 STU	//  mode ans_tag query_id body _27
    s1 s3 XCHG	//  mode body query_id ans_tag _27
    32 STU	//  mode body query_id _29
    64 STU	//  mode body msg
    OVER	//  mode body msg body
    -1 GTINT	//  mode body msg _33
    IF:<{	//  mode body msg
      32 STU	//  mode msg
    }>ELSE<{
      NIP	//  mode msg
    }>
    ENDC	//  mode _37
    SWAP	//  _37 mode
    SENDRAWMSG
  }>
  buy_ticket PROC:<{
    //  addr_s msg_value in_msg query_id
    s3 PUSH	//  addr_s msg_value in_msg query_id addr_s
    REWRITESTDADDR	//  addr_s msg_value in_msg query_id wc addr
    s0 s4 XCHG
    2000000000 PUSHINT	//  addr_s addr in_msg query_id wc msg_value _7=2000000000
    LESS	//  addr_s addr in_msg query_id wc _8
    IFJMP:<{	//  addr_s addr in_msg query_id wc
      DROP
      NIP
      2147483649 PUSHINT
      s2 POP
      1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _9=2147483649 query_id _10=1 _11=0 _12=64
      send_message_back CALLDICT
    }>	//  addr_s addr in_msg query_id wc
    s0 s2 XCHG	//  addr_s addr wc query_id in_msg
    8 LDU	//  addr_s addr wc query_id _17 in_msg
    8 LDU	//  addr_s addr wc query_id _17 _20 in_msg
    8 LDU	//  addr_s addr wc query_id n1 n2 n3 in_msg
    ENDS
    s2 s1 PUSH2	//  addr_s addr wc query_id n1 n2 n3 n1 n2
    EQUAL	//  addr_s addr wc query_id n1 n2 n3 _27
    s3 s1 PUSH2	//  addr_s addr wc query_id n1 n2 n3 _27 n1 n3
    EQUAL	//  addr_s addr wc query_id n1 n2 n3 _27 _28
    OR	//  addr_s addr wc query_id n1 n2 n3 _29
    s2 s1 PUSH2	//  addr_s addr wc query_id n1 n2 n3 _29 n2 n3
    EQUAL	//  addr_s addr wc query_id n1 n2 n3 _29 _30
    OR	//  addr_s addr wc query_id n1 n2 n3 _31
    IFJMP:<{	//  addr_s addr wc query_id n1 n2 n3
      s3 s4 XCHG
      4 BLKDROP
      2147483649 PUSHINT
      s2 POP
      2 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _32=2147483649 query_id _33=2 _34=0 _35=64
      send_message_back CALLDICT
    }>	//  addr_s addr wc query_id n1 n2 n3
    s2 PUSH	//  addr_s addr wc query_id n1 n2 n3 n1
    99 GTINT	//  addr_s addr wc query_id n1 n2 n3 _38
    s2 PUSH	//  addr_s addr wc query_id n1 n2 n3 _38 n2
    99 GTINT	//  addr_s addr wc query_id n1 n2 n3 _38 _40
    OR	//  addr_s addr wc query_id n1 n2 n3 _41
    OVER	//  addr_s addr wc query_id n1 n2 n3 _41 n3
    99 GTINT	//  addr_s addr wc query_id n1 n2 n3 _41 _43
    OR	//  addr_s addr wc query_id n1 n2 n3 _44
    IFJMP:<{	//  addr_s addr wc query_id n1 n2 n3
      s3 s4 XCHG
      4 BLKDROP
      2147483649 PUSHINT
      s2 POP
      5 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _45=2147483649 query_id _46=5 _47=0 _48=64
      send_message_back CALLDICT
    }>	//  addr_s addr wc query_id n1 n2 n3
    load_data CALLDICT	//  addr_s addr wc query_id n1 n2 n3 round old_round old_winners comsa seqno owner
    s0 s5 XCHG	//  addr_s addr wc query_id n1 n2 n3 owner old_round old_winners comsa seqno round
    unpack_round CALLDICT	//  addr_s addr wc query_id n1 n2 n3 owner old_round old_winners comsa seqno prize_fund participants
    s0 s11 XCHG
    NEWC	//  addr_s addr participants query_id n1 n2 n3 owner old_round old_winners comsa seqno prize_fund wc _61
    8 STI	//  addr_s addr participants query_id n1 n2 n3 owner old_round old_winners comsa seqno prize_fund _63
    s1 s12 XCHG	//  addr_s prize_fund participants query_id n1 n2 n3 owner old_round old_winners comsa seqno addr _63
    256 STU	//  addr_s prize_fund participants query_id n1 n2 n3 owner old_round old_winners comsa seqno _65
    ENDC	//  addr_s prize_fund participants query_id n1 n2 n3 owner old_round old_winners comsa seqno addr_c
    s0 s8 XCHG
    NEWC	//  addr_s prize_fund participants query_id addr_c n2 n3 owner old_round old_winners comsa seqno n1 _68
    8 STU	//  addr_s prize_fund participants query_id addr_c n2 n3 owner old_round old_winners comsa seqno _70
    s1 s7 XCHG	//  addr_s prize_fund participants query_id addr_c seqno n3 owner old_round old_winners comsa n2 _70
    8 STU	//  addr_s prize_fund participants query_id addr_c seqno n3 owner old_round old_winners comsa _72
    s1 s5 XCHG	//  addr_s prize_fund participants query_id addr_c seqno comsa owner old_round old_winners n3 _72
    8 STU	//  addr_s prize_fund participants query_id addr_c seqno comsa owner old_round old_winners nums
    s0 s6 XCHG	//  addr_s prize_fund participants query_id nums seqno comsa owner old_round old_winners addr_c
    CTOS	//  addr_s prize_fund participants query_id nums seqno comsa owner old_round old_winners _77
    s6 s0 s8 XCHG3
    264 PUSHINT	//  addr_s prize_fund old_winners query_id old_round seqno comsa owner nums _77 participants _80
    DICTADDB	//  addr_s prize_fund old_winners query_id old_round seqno comsa owner participants f
    IFNOTJMP:<{	//  addr_s prize_fund old_winners query_id old_round seqno comsa owner participants
      s5 s6 XCHG
      6 BLKDROP
      2147483649 PUSHINT
      s2 POP
      3 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _82=2147483649 query_id _83=3 _84=0 _85=64
      send_message_back CALLDICT
    }>	//  addr_s prize_fund old_winners query_id old_round seqno comsa owner participants
    s0 s7 XCHG
    1000000000 PUSHINT	//  addr_s participants old_winners query_id old_round seqno comsa owner prize_fund _87=1000000000
    ADD	//  addr_s participants old_winners query_id old_round seqno comsa owner _88
    s0 s7 XCHG2	//  addr_s owner old_winners query_id old_round seqno comsa _88 participants
    pack_round CALLDICT	//  addr_s owner old_winners query_id old_round seqno comsa round
    s0 s5 XCHG
    s0 s3 XCHG
    s0 s4 XCHG
    s2 s6 XCHG2	//  addr_s query_id round old_round old_winners comsa seqno owner
    save_data CALLDICT
    1000000000 PUSHINT	//  addr_s query_id _91=1000000000
    4 PUSHINT	//  addr_s query_id _91=1000000000 _92=4
    RAWRESERVE
    20 PUSHINT	//  addr_s query_id _94=20
    0 PUSHINT	//  addr_s query_id _94=20 _95=0
    s2 s0 s0 XC2PU
    7 PUSHPOW2	//  addr_s _94=20 query_id _95=0 _96=0 _97=128
    send_message_back CALLDICT
  }>
  comment_to_nums PROC:<{
    //  in_msg
    NEWC	//  in_msg nums
    0 PUSHINT	//  in_msg nums nums_count=0
    PUSHNULL	//  in_msg nums nums_count=0 l
    UNTIL:<{
      32 PUSHINT	//  in_msg nums nums_count l char=32
      s4 PUSH	//  in_msg nums nums_count l char=32 in_msg
      SEMPTY	//  in_msg nums nums_count l char=32 _13
      IFNOT:<{	//  in_msg nums nums_count l char=32
        DROP	//  in_msg nums nums_count l
        s0 s3 XCHG	//  l nums nums_count in_msg
        8 LDU	//  l nums nums_count char in_msg
        s4 s4 XCHG2	//  in_msg nums nums_count l char
      }>	//  in_msg nums nums_count l char
      DUP	//  in_msg nums nums_count l char char
      32 EQINT	//  in_msg nums nums_count l char _18
      IF:<{	//  in_msg nums nums_count l char
        DROP	//  in_msg nums nums_count l
        0 PUSHINT	//  in_msg nums nums_count l num=0
        1 PUSHINT	//  in_msg nums nums_count l num=0 order=1
        UNTIL:<{
          s0 s2 XCHG	//  in_msg nums nums_count order num l
          UNCONS	//  in_msg nums nums_count order num n l
          SWAP	//  in_msg nums nums_count order num l n
          -48 ADDCONST	//  in_msg nums nums_count order num l _26
          s3 PUSH	//  in_msg nums nums_count order num l _26 order
          MUL	//  in_msg nums nums_count order num l _27
          s1 s2 XCHG	//  in_msg nums nums_count order l num _27
          ADD	//  in_msg nums nums_count order l num
          s0 s2 XCHG	//  in_msg nums nums_count num l order
          10 MULCONST	//  in_msg nums nums_count num l order
          OVER	//  in_msg nums nums_count num l order l
          ISNULL	//  in_msg nums nums_count num l order _31
          s2 s3 XCHG	//  in_msg nums nums_count l num order _31
        }>	//  in_msg nums nums_count l num order
        DROP	//  in_msg nums nums_count l num
        s0 s3 XCHG2	//  in_msg l nums_count num nums
        8 STU	//  in_msg l nums_count nums
        SWAP	//  in_msg l nums nums_count
        INC	//  in_msg l nums nums_count
      }>ELSE<{	//  in_msg nums nums_count l char
        SWAP	//  in_msg nums nums_count char l
        CONS	//  in_msg nums nums_count l
        -ROT	//  in_msg l nums nums_count
      }>
      DUP	//  in_msg l nums nums_count nums_count
      3 EQINT	//  in_msg l nums nums_count _39
      s1 s3 s0 XCHG3	//  in_msg nums nums_count l _39
    }>	//  in_msg nums nums_count l
    s2 s3 XCHG
    3 BLKDROP	//  nums
    ENDC	//  _40
    TRUE	//  _40 _41
  }>
  sponsor_prize_fund PROC:<{
    //  msg_value
    load_data CALLDICT	//  msg_value round old_round old_winners comsa seqno owner
    s0 s5 XCHG	//  msg_value owner old_round old_winners comsa seqno round
    unpack_round CALLDICT	//  msg_value owner old_round old_winners comsa seqno prize_fund participants
    s0 s7 XCHG	//  participants owner old_round old_winners comsa seqno prize_fund msg_value
    ADD	//  participants owner old_round old_winners comsa seqno _11
    s0 s6 XCHG2	//  seqno owner old_round old_winners comsa _11 participants
    pack_round CALLDICT	//  seqno owner old_round old_winners comsa round
    s0 s5 XCHG
    4 ROLL	//  round old_round old_winners comsa seqno owner
    save_data CALLDICT
  }>
  withdraw_prize PROC:<{
    //  addr_s query_id
    OVER	//  addr_s query_id addr_s
    REWRITESTDADDR	//  addr_s query_id wc addr
    SWAP
    NEWC	//  addr_s query_id addr wc _6
    8 STI	//  addr_s query_id addr _8
    256 STU	//  addr_s query_id _10
    ENDC	//  addr_s query_id addr_c
    load_data CALLDICT	//  addr_s query_id addr_c round old_round old_winners comsa seqno owner
    s3 PUSH	//  addr_s query_id addr_c round old_round old_winners comsa seqno owner old_winners
    ISNULL	//  addr_s query_id addr_c round old_round old_winners comsa seqno owner _19
    IFJMP:<{	//  addr_s query_id addr_c round old_round old_winners comsa seqno owner
      7 BLKDROP	//  addr_s query_id
      2147483651 PUSHINT	//  addr_s query_id _20=2147483651
      SWAP
      -1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _20=2147483651 query_id _21=-1 _22=0 _23=64
      send_message_back CALLDICT
    }>	//  addr_s query_id addr_c round old_round old_winners comsa seqno owner
    s0 s6 XCHG	//  addr_s query_id owner round old_round old_winners comsa seqno addr_c
    CTOS	//  addr_s query_id owner round old_round old_winners comsa seqno _28
    s0 s3 XCHG2
    264 PUSHINT	//  addr_s query_id owner round old_round seqno comsa _28 old_winners _31
    DICTDELGET
    NULLSWAPIFNOT	//  addr_s query_id owner round old_round seqno comsa old_winners prize_s f
    IFNOTJMP:<{	//  addr_s query_id owner round old_round seqno comsa old_winners prize_s
      7 BLKDROP	//  addr_s query_id
      2147483651 PUSHINT	//  addr_s query_id _33=2147483651
      SWAP
      -1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  addr_s _33=2147483651 query_id _34=-1 _35=0 _36=64
      send_message_back CALLDICT
    }>	//  addr_s query_id owner round old_round seqno comsa old_winners prize_s
    LDGRAMS	//  addr_s query_id owner round old_round seqno comsa old_winners prize prize_s
    ENDS
    s3 s6 XCHG2	//  addr_s query_id prize round old_round old_winners comsa seqno owner
    save_data CALLDICT
    12 PUSHINT	//  addr_s query_id prize _43=12
    RAWRESERVE
    2147483651 PUSHINT	//  addr_s query_id _45=2147483651
    SWAP
    -1 PUSHINT
    0 PUSHINT
    7 PUSHPOW2	//  addr_s _45=2147483651 query_id _46=-1 _47=0 _48=128
    send_message_back CALLDICT
  }>
  conduct_round PROC:<{
    //  round old_round old_winners comsa
    s3 PUSH	//  round old_round old_winners comsa round
    unpack_round CALLDICT	//  round old_round old_winners comsa prize_fund participants
    DUP	//  round old_round old_winners comsa prize_fund participants participants
    ISNULL	//  round old_round old_winners comsa prize_fund participants _7
    IFJMP:<{	//  round old_round old_winners comsa prize_fund participants
      2DROP	//  round old_round old_winners comsa
    }>	//  round old_round old_winners comsa prize_fund participants
    s4 POP
    s4 POP	//  prize_fund participants old_winners comsa
    LTIME
    ADDRAND
    NEWDICT	//  prize_fund participants old_winners comsa lucky_nums
    0 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums i=0
    WHILE:<{
      DUP	//  prize_fund participants old_winners comsa lucky_nums i i
      13 LESSINT	//  prize_fund participants old_winners comsa lucky_nums i _14
    }>DO<{	//  prize_fund participants old_winners comsa lucky_nums i
      NEWC	//  prize_fund participants old_winners comsa lucky_nums i _17
      100 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums i _17 _18=100
      RAND	//  prize_fund participants old_winners comsa lucky_nums i _17 _19
      3 ROLL
      8 PUSHINT	//  prize_fund participants old_winners comsa i _17 _19 lucky_nums _20=8
      DICTUADDB	//  prize_fund participants old_winners comsa i lucky_nums f
      IF:<{	//  prize_fund participants old_winners comsa i lucky_nums
        SWAP	//  prize_fund participants old_winners comsa lucky_nums i
        INC	//  prize_fund participants old_winners comsa lucky_nums i
        SWAP	//  prize_fund participants old_winners comsa i lucky_nums
      }>	//  prize_fund participants old_winners comsa i lucky_nums
      SWAP	//  prize_fund participants old_winners comsa lucky_nums i
    }>	//  prize_fund participants old_winners comsa lucky_nums i
    DROP	//  prize_fund participants old_winners comsa lucky_nums
    0 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1=0
    s0 s0 PUSH2	//  prize_fund participants old_winners comsa lucky_nums winners1=0 winners2=0 winners3=0
    NEWDICT	//  prize_fund participants old_winners comsa lucky_nums winners1=0 winners2=0 winners3=0 winners
    s7 PUSH
    264 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1=0 winners2=0 winners3=0 winners participants _37
    DICTMIN
    NULLSWAPIFNOT2	//  prize_fund participants old_winners comsa lucky_nums winners1=0 winners2=0 winners3=0 winners nums addr_s f
    WHILE:<{
    }>DO<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s
      0 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums=0
      3 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums=0 _41=3
      REPEAT:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums
        s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums
        8 LDU	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s n nums
        s1 s8 XCPU
        8 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums n lucky_nums _48=8
        DICTUGET
        NULLSWAPIFNOT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums _181 _182
        NIP	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums f1
        IF:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums
          s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums
          INC	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums
          s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums
        }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums
        s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s matched_nums
      }>
      s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s nums
      ENDS
      OVER	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s matched_nums
      0 EQINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s _54
      IFNOT:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
        OVER
        NEWC	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s matched_nums _56
        2 STU	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s _58
        s0 s0 s3 XCPUXC
        264 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 addr_s matched_nums _58 addr_s winners _61
        DICTSETB	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 addr_s matched_nums winners
        s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      OVER	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s matched_nums
      1 EQINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s _64
      IF:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
        s0 s5 XCHG	//  prize_fund participants old_winners comsa lucky_nums addr_s winners2 winners3 winners matched_nums winners1
        INC	//  prize_fund participants old_winners comsa lucky_nums addr_s winners2 winners3 winners matched_nums winners1
        s0 s5 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      OVER	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s matched_nums
      2 EQINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s _68
      IF:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
        s0 s4 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 addr_s winners3 winners matched_nums winners2
        INC	//  prize_fund participants old_winners comsa lucky_nums winners1 addr_s winners3 winners matched_nums winners2
        s0 s4 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners matched_nums addr_s
      SWAP	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s matched_nums
      3 EQINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s _72
      IF:<{	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s
        s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 addr_s winners winners3
        INC	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 addr_s winners winners3
        s0 s2 XCHG	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s
      }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s
      s8 PUSH
      264 PUSHINT	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners addr_s participants _77
      DICTGETNEXT
      NULLSWAPIFNOT2	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s f
    }>	//  prize_fund participants old_winners comsa lucky_nums winners1 winners2 winners3 winners nums addr_s
    2DROP
    s7 POP	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3
    s7 PUSH	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 prize_fund
    6 MULCONST	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 _81
    10 PUSHINT	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 _81 _82=10
    DIV	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3
    s8 PUSH	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 prize_fund
    22 MULCONST	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 _86
    100 PUSHINT	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 _86 _87=100
    DIV	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2
    s9 PUSH	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 prize_fund
    15 MULCONST	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 _91
    100 PUSHINT	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 _91 _92=100
    DIV	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1
    s10 PUSH	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 prize_fund
    3 MULCONST	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 _96
    100 PUSHINT	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 _96 _97=100
    DIV	//  prize_fund winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 round_comsa
    s11 s11 XCPU	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 prize_fund round_comsa
    SUB	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund
    0 PUSHINT	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund prize1=0
    s0 s0 s7 PUSH3	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0 winners1
    0 GTINT	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0 _108
    IF:<{	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0
      s2 POP	//  round_comsa winners old_winners comsa lucky_nums winners1 winners2 winners3 pf3 pf2 pf1 next_round_fund prize3=0 prize2=0
      s3 s8 PUXC	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 pf1 next_round_fund prize3=0 pf1 winners1
      DIV	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 pf1 next_round_fund prize3=0 prize1
      s2 s3 XCHG2	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize1 prize3=0 next_round_fund pf1
      SUB	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize1 prize3=0 next_round_fund
      ROT	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize3=0 next_round_fund prize1
    }>ELSE<{
      s4 POP
      s8 POP	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize3=0 next_round_fund prize1
    }>
    s6 PUSH	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize3=0 next_round_fund prize1 winners2
    0 GTINT	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize3=0 next_round_fund prize1 _112
    IF:<{	//  round_comsa winners old_winners comsa lucky_nums prize2=0 winners2 winners3 pf3 pf2 prize3=0 next_round_fund prize1
      s7 POP	//  round_comsa winners old_winners comsa lucky_nums prize1 winners2 winners3 pf3 pf2 prize3=0 next_round_fund
      s2 s5 PUXC	//  round_comsa winners old_winners comsa lucky_nums prize1 next_round_fund winners3 pf3 pf2 prize3=0 pf2 winners2
      DIV	//  round_comsa winners old_winners comsa lucky_nums prize1 next_round_fund winners3 pf3 pf2 prize3=0 prize2
      s5 s2 XCHG2	//  round_comsa winners old_winners comsa lucky_nums prize1 prize3=0 winners3 pf3 prize2 next_round_fund pf2
      SUB	//  round_comsa winners old_winners comsa lucky_nums prize1 prize3=0 winners3 pf3 prize2 next_round_fund
      s5 s4 XCHG2	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1 prize3=0
    }>ELSE<{
      s3 POP
      s5 POP	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1 prize3=0
    }>
    s3 PUSH	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1 prize3=0 winners3
    0 GTINT	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1 prize3=0 _116
    IF:<{	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1 prize3=0
      DROP	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund winners3 pf3 prize1
      s1 s2 PUXC	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund prize1 pf3 pf3 winners3
      DIV	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund prize1 pf3 prize3
      s3 s3 XCHG2	//  round_comsa winners old_winners comsa lucky_nums prize2 prize3 prize1 next_round_fund pf3
      SUB	//  round_comsa winners old_winners comsa lucky_nums prize2 prize3 prize1 next_round_fund
      s0 s2 XCHG	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund prize1 prize3
    }>ELSE<{
      2 2 BLKDROP2	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund prize1 prize3
    }>
    NEWDICT	//  round_comsa winners old_winners comsa lucky_nums prize2 next_round_fund prize1 prize3 _119
    s1 s3 XCHG	//  round_comsa winners old_winners comsa lucky_nums prize2 prize3 prize1 next_round_fund _119
    pack_round CALLDICT	//  round_comsa winners old_winners comsa lucky_nums prize2 prize3 prize1 round
    s4 s1 s3 XCPU2
    s4 PUSH	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 lucky_nums prize1 prize2 prize3
    pack_old_round CALLDICT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round
    s6 PUSH	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round old_winners
    ISNULL	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round _122
    IF:<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round
      s6 POP	//  round_comsa winners old_round comsa round prize2 prize3 prize1
      NEWDICT	//  round_comsa winners old_round comsa round prize2 prize3 prize1 old_winners
      s0 s6 XCHG	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round
    }>	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round
    s7 PUSH
    264 PUSHINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round winners _129
    DICTMIN
    NULLSWAPIFNOT2	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round matched_nums_s addr_s f
    WHILE:<{
    }>DO<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round matched_nums_s addr_s
      SWAP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums_s
      2 LDU	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums matched_nums_s
      ENDS
      0 PUSHINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize=0
      OVER	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize=0 matched_nums
      1 EQINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize=0 _141
      IF:<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize=0
        DROP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums
        s3 PUSH	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize
      }>	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize
      OVER	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize matched_nums
      2 EQINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize _143
      IF:<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize
        DROP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums
        s5 PUSH	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize
      }>	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s matched_nums prize
      SWAP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize matched_nums
      3 EQINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize _145
      IF:<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize
        DROP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s
        s3 PUSH	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize
      }>	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize
      DUP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize prize
      0 EQINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize _148
      66 THROWIF
      s1 s8 PUSH2
      264 PUSHINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize addr_s old_winners _154
      DICTGET
      NULLSWAPIFNOT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize old_prize_s f1
      IF:<{	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize old_prize_s
        LDGRAMS	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize _156 old_prize_s
        -ROT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s old_prize_s prize _156
        ADD	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s old_prize_s prize
        SWAP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize old_prize_s
        ENDS
      }>ELSE<{
        DROP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize
      }>
      NEWC	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s prize _161
      SWAP	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s _161 prize
      STGRAMS	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s _162
      s0 s0 s8 XCPUXC
      264 PUSHINT	//  round_comsa winners addr_s comsa round prize2 prize3 prize1 old_round _162 addr_s old_winners _165
      DICTSETB	//  round_comsa winners addr_s comsa round prize2 prize3 prize1 old_round old_winners
      s7 s8 XCPU
      264 PUSHINT	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round addr_s winners _169
      DICTGETNEXT
      NULLSWAPIFNOT2	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round matched_nums_s addr_s f
    }>	//  round_comsa winners old_winners comsa round prize2 prize3 prize1 old_round matched_nums_s addr_s
    s2 s5 XCHG
    5 BLKDROP
    s4 POP	//  round_comsa old_round old_winners comsa round
    s0 s4 XCHG	//  round old_round old_winners comsa round_comsa
    ADD	//  round old_round old_winners _171
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_cell in_msg
    SWAP	//  msg_value in_msg in_msg_cell
    CTOS	//  msg_value in_msg cs
    4 LDU	//  msg_value in_msg flags cs
    LDMSGADDR	//  msg_value in_msg flags _56 _55
    DROP	//  msg_value in_msg flags addr_s
    SWAP
    1 PUSHINT	//  msg_value in_msg addr_s flags _12=1
    AND	//  msg_value in_msg addr_s _13
    s2 PUSH	//  msg_value in_msg addr_s _13 in_msg
    SEMPTY	//  msg_value in_msg addr_s _13 _14
    OR	//  msg_value in_msg addr_s _15
    IFJMP:<{	//  msg_value in_msg addr_s
      3 BLKDROP	// 
    }>	//  msg_value in_msg addr_s
    SWAP	//  msg_value addr_s in_msg
    32 LDU	//  msg_value addr_s op in_msg
    OVER	//  msg_value addr_s op in_msg op
    0 EQINT	//  msg_value addr_s op in_msg _21
    IFJMP:<{	//  msg_value addr_s op in_msg
      NIP	//  msg_value addr_s in_msg
      DUP	//  msg_value addr_s in_msg in_msg
      SEMPTY	//  msg_value addr_s in_msg _22
      IFJMP:<{	//  msg_value addr_s in_msg
        DROP
        NIP	//  addr_s
        0 PUSHINT	//  addr_s _23=0
        withdraw_prize CALLDICT
      }>	//  msg_value addr_s in_msg
      comment_to_nums CALLDICT	//  msg_value addr_s nums ok
      IFNOTJMP:<{	//  msg_value addr_s nums
        3 BLKDROP	// 
      }>	//  msg_value addr_s nums
      CTOS	//  msg_value addr_s _28
      s1 s2 XCHG
      0 PUSHINT	//  addr_s msg_value _28 _29=0
      buy_ticket CALLDICT
    }>	//  msg_value addr_s op in_msg
    OVER	//  msg_value addr_s op in_msg op
    1 EQINT	//  msg_value addr_s op in_msg _32
    IFJMP:<{	//  msg_value addr_s op in_msg
      NIP	//  msg_value addr_s in_msg
      s1 s2 XCHG
      0 PUSHINT	//  addr_s msg_value in_msg _33=0
      buy_ticket CALLDICT
    }>	//  msg_value addr_s op in_msg
    OVER	//  msg_value addr_s op in_msg op
    2 EQINT	//  msg_value addr_s op in_msg _36
    IFJMP:<{	//  msg_value addr_s op in_msg
      2 1 BLKDROP2	//  msg_value in_msg
      ENDS
      sponsor_prize_fund CALLDICT
    }>	//  msg_value addr_s op in_msg
    s3 POP	//  in_msg addr_s op
    DUP	//  in_msg addr_s op op
    3 EQINT	//  in_msg addr_s op _40
    IFJMP:<{	//  in_msg addr_s op
      DROP	//  in_msg addr_s
      SWAP	//  addr_s in_msg
      ENDS
      0 PUSHINT	//  addr_s _42=0
      withdraw_prize CALLDICT
    }>	//  in_msg addr_s op
    s2 POP	//  op addr_s
    OVER
    31 PUSHPOW2	//  op addr_s op _46
    AND	//  op addr_s _47
    IFNOTJMP:<{	//  op addr_s
      32 PUSHPOW2DEC	//  op addr_s _48=4294967295
      0 PUSHINT	//  op addr_s _48=4294967295 _49=0
      DUP	//  op addr_s _48=4294967295 _49=0 _50=0
      s3 s4 XCHG
      s1 s3 s0 XCHG3
      64 PUSHINT	//  addr_s _48=4294967295 _49=0 op _50=0 _51=64
      send_message_back CALLDICT
    }>	//  op addr_s
    2DROP	// 
  }>
  recv_external PROC:<{
    //  in_msg
    9 PUSHPOW2	//  in_msg _3=512
    LDSLICEX	//  signature in_msg
    DUP	//  signature in_msg cs
    32 LDU	//  signature in_msg _9 cs
    32 LDU	//  signature in_msg _9 _12 cs
    32 LDU	//  signature in_msg msg_seqno valid_until op cs
    NOW	//  signature in_msg msg_seqno valid_until op cs _19
    s1 s3 XCHG	//  signature in_msg msg_seqno cs op valid_until _19
    LEQ	//  signature in_msg msg_seqno cs op _20
    35 THROWIF
    load_data CALLDICT	//  signature in_msg msg_seqno cs op round old_round old_winners comsa seqno owner
    s8 s1 XCPU	//  signature in_msg owner cs op round old_round old_winners comsa seqno msg_seqno seqno
    EQUAL	//  signature in_msg owner cs op round old_round old_winners comsa seqno _30
    33 THROWIFNOT
    s0 s8 XCHG	//  signature seqno owner cs op round old_round old_winners comsa in_msg
    HASHSU	//  signature seqno owner cs op round old_round old_winners comsa _33
    s0 s9 s7 XC2PU	//  comsa seqno owner cs op round old_round old_winners _33 signature owner
    CHKSIGNU	//  comsa seqno owner cs op round old_round old_winners _34
    34 THROWIFNOT
    ACCEPT
    s3 PUSH	//  comsa seqno owner cs op round old_round old_winners op
    2 EQINT	//  comsa seqno owner cs op round old_round old_winners _38
    IF:<{	//  comsa seqno owner cs op round old_round old_winners
      s4 PUSH	//  comsa seqno owner cs op round old_round old_winners cs
      ENDS
      3 ROLL
      s0 s7 XCHG	//  op seqno owner cs round old_round old_winners comsa
      conduct_round CALLDICT	//  op seqno owner cs round old_round old_winners comsa
      s0 s7 XCHG
      3 -ROLL	//  comsa seqno owner cs op round old_round old_winners
    }>	//  comsa seqno owner cs op round old_round old_winners
    s0 s3 XCHG	//  comsa seqno owner cs old_winners round old_round op
    3 EQINT	//  comsa seqno owner cs old_winners round old_round _42
    IF:<{	//  comsa seqno owner cs old_winners round old_round
      s0 s3 XCHG	//  comsa seqno owner old_round old_winners round cs
      267 PUSHINT	//  comsa seqno owner old_round old_winners round cs _51
      LDSLICEX	//  comsa seqno owner old_round old_winners round dest_addr_s cs
      ENDS
      BALANCE	//  comsa seqno owner old_round old_winners round dest_addr_s _54
      FIRST	//  comsa seqno owner old_round old_winners round dest_addr_s _55
      s7 PUSH
      3000000000 PUSHINT	//  comsa seqno owner old_round old_winners round dest_addr_s _55 comsa _56=3000000000
      ADD	//  comsa seqno owner old_round old_winners round dest_addr_s _55 _57
      GREATER	//  comsa seqno owner old_round old_winners round dest_addr_s _58
      IF:<{	//  comsa seqno owner old_round old_winners round dest_addr_s
        s0 s6 XCHG
        3 PUSHINT	//  dest_addr_s seqno owner old_round old_winners round comsa _59=3
        RAWRESERVE
        19 PUSHINT	//  dest_addr_s seqno owner old_round old_winners round _61=19
        0 PUSHINT	//  dest_addr_s seqno owner old_round old_winners round _61=19 _62=0
        -1 PUSHINT	//  dest_addr_s seqno owner old_round old_winners round _61=19 _62=0 _63=-1
        OVER	//  dest_addr_s seqno owner old_round old_winners round _61=19 _62=0 _63=-1 _64=0
        s4 s9 XCHG
        7 PUSHPOW2	//  round seqno owner old_round old_winners dest_addr_s _61=19 _62=0 _63=-1 _64=0 _65=128
        send_message_back CALLDICT
        0 PUSHINT	//  round seqno owner old_round old_winners comsa=0
        s0 s5 XCHG	//  comsa=0 seqno owner old_round old_winners round
      }>ELSE<{
        DROP	//  comsa seqno owner old_round old_winners round
      }>
    }>ELSE<{
      s3 POP	//  comsa seqno owner old_round old_winners round
    }>
    s0 s4 XCHG	//  comsa round owner old_round old_winners seqno
    INC	//  comsa round owner old_round old_winners _69
    s4 s5 XCHG
    s4 s0 s3 XCHG3	//  round old_round old_winners comsa _69 owner
    save_data CALLDICT
  }>
  seqno PROC:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    SKIPDICT	//  _2
    SKIPDICT	//  _3
    SKIPDICT	//  _4
    LDGRAMS
    NIP	//  _5
    32 PLDU	//  _7
  }>
  prize_fund PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    PLDDICT	//  round
    DUP	//  round round
    ISNULL	//  round _4
    IF:<{	//  round
      DROP	// 
      0 PUSHINT	//  _5=0
    }>ELSE<{	//  round
      CTOS	//  _7
      LDGRAMS
      DROP	//  _5
    }>
  }>
  participants PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    PLDDICT	//  round
    DUP	//  round round
    ISNULL	//  round _4
    IFJMP:<{	//  round
      DROP	// 
      PUSHNULL	//  _5
    }>	//  round
    CTOS	//  _7
    LDGRAMS
    NIP	//  _8
    PLDDICT	//  participants
    DUP	//  participants participants
    ISNULL	//  participants _10
    IFJMP:<{	//  participants
      DROP	// 
      PUSHNULL	//  _11
    }>	//  participants
  }>
  lucky_nums PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      PUSHNULL	//  _6
    }>	//  old_round
    CTOS	//  _8
    PLDDICT	//  lucky_nums
    PUSHNULL	//  lucky_nums res
    -1 PUSHINT	//  lucky_nums res i=-1
    UNTIL:<{
      s2 PUSH
      8 PUSHINT	//  lucky_nums res i lucky_nums _16=8
      DICTUGETNEXT
      NULLSWAPIFNOT2	//  lucky_nums res _21 _20 _22
      s2 POP	//  lucky_nums res f i
      OVER	//  lucky_nums res f i f
      IF:<{	//  lucky_nums res f i
        s0 s2 PUXC	//  lucky_nums i f i res
        CONS	//  lucky_nums i f res
        s0 s2 XCHG	//  lucky_nums res f i
      }>	//  lucky_nums res f i
      SWAP	//  lucky_nums res i f
      NOT	//  lucky_nums res i _19
    }>	//  lucky_nums res i
    DROP
    NIP	//  res
  }>
  prizes PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      0 PUSHINT	//  _6=0
      s0 s0 PUSH2	//  _6=0 _7=0 _8=0
    }>	//  old_round
    CTOS	//  _10
    SKIPDICT	//  ds
    LDGRAMS	//  _15 ds
    LDGRAMS	//  _15 _17 ds
    LDGRAMS	//  _15 _17 _26 _25
    DROP	//  prize1 prize2 prize3
  }>
  is_winner_s PROC:<{
    //  addr_s
    REWRITESTDADDR	//  wc addr
    SWAP
    NEWC	//  addr wc _5
    8 STI	//  addr _7
    256 STU	//  _9
    ENDC	//  addr_c
    c4 PUSH	//  addr_c _12
    CTOS	//  addr_c _13
    SKIPDICT	//  addr_c _14
    SKIPDICT	//  addr_c _15
    PLDDICT	//  addr_c old_winners
    DUP	//  addr_c old_winners old_winners
    ISNULL	//  addr_c old_winners _17
    IFJMP:<{	//  addr_c old_winners
      2DROP	// 
      0 PUSHINT	//  _18=0
    }>	//  addr_c old_winners
    SWAP	//  old_winners addr_c
    CTOS	//  old_winners _21
    SWAP
    264 PUSHINT	//  _21 old_winners _24
    DICTGET
    NULLSWAPIFNOT	//  prize_s f
    IF:<{	//  prize_s
      LDGRAMS
      DROP	//  _26
    }>ELSE<{	//  prize_s
      DROP	// 
      0 PUSHINT	//  _26=0
    }>
  }>
  is_winner PROC:<{
    //  wc addr
    4 PUSHINT	//  wc addr _3=4
    NEWC	//  wc addr _3=4 _4
    3 STU	//  wc addr _6
    s1 s2 XCHG	//  addr wc _6
    8 STI	//  addr _8
    256 STU	//  _10
    ENDC	//  addr_c
    CTOS	//  _12
    is_winner_s CALLDICT	//  _13
  }>
  comsa PROC:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    SKIPDICT	//  _2
    SKIPDICT	//  _3
    SKIPDICT	//  _4
    LDGRAMS
    DROP	//  _5
  }>
}END>c
