// automatically generated from `/mnt/c/Work3/ton/crypto/smartcont/stdlib.fc` `code.fc` 
PROGRAM{
  DECLPROC load_data
  DECLPROC save_data
  DECLPROC unpack_round
  DECLPROC pack_round
  DECLPROC conduct_round
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  79045 DECLMETHOD prize_fund
  84929 DECLMETHOD lucky_nums
  77502 DECLMETHOD lucky_nums2
  128887 DECLMETHOD winners
  118635 DECLMETHOD is_winner
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  data_s
    LDDICT	//  _4 data_s
    LDDICT	//  _4 _6 data_s
    32 LDU	//  _4 _6 _8 data_s
    256 LDU	//  res res res res data_s
    ENDS
  }>
  save_data PROC:<{
    //  round old_round seqno owner
    NEWC	//  round old_round seqno owner _4
    s1 s4 XCHG	//  owner old_round seqno round _4
    STDICT	//  owner old_round seqno _5
    s1 s2 XCHG	//  owner seqno old_round _5
    STDICT	//  owner seqno _6
    32 STU	//  owner _8
    256 STU	//  _10
    ENDC	//  _11
    c4 POP
  }>
  unpack_round PROC:<{
    //  round
    DUP	//  round round
    ISNULL	//  round _1
    IFJMP:<{	//  round
      DROP	// 
      0 PUSHINT	//  _2=0
      DUP	//  _2=0 _3=0
      NEWDICT	//  _2=0 _3=0 _4
    }>	//  round
    CTOS	//  round_s
    32 LDU	//  _8 round_s
    LDGRAMS	//  _8 _11 round_s
    LDDICT	//  res res res round_s
    ENDS
  }>
  pack_round PROC:<{
    //  id prize_fund participants
    NEWC	//  id prize_fund participants _3
    s1 s3 XCHG	//  participants prize_fund id _3
    32 STU	//  participants prize_fund _5
    SWAP	//  participants _5 prize_fund
    STGRAMS	//  participants _6
    STDICT	//  _7
    ENDC	//  _8
  }>
  conduct_round PROC:<{
    //  round
    unpack_round CALLDICT	//  id prize_fund participants
    NEWDICT	//  id prize_fund participants lucky_nums
    0 PUSHINT	//  id prize_fund participants lucky_nums i=0
    WHILE:<{
      DUP	//  id prize_fund participants lucky_nums i i
      13 LESSINT	//  id prize_fund participants lucky_nums i _10
    }>DO<{	//  id prize_fund participants lucky_nums i
      LTIME
      ADDRAND
      NEWC	//  id prize_fund participants lucky_nums i _14
      99 PUSHINT	//  id prize_fund participants lucky_nums i _14 _15=99
      RAND	//  id prize_fund participants lucky_nums i _14 _16
      3 ROLL
      8 PUSHINT	//  id prize_fund participants i _14 _16 lucky_nums _17=8
      DICTUADDB	//  id prize_fund participants i lucky_nums f
      IF:<{	//  id prize_fund participants i lucky_nums
        SWAP	//  id prize_fund participants lucky_nums i
        INC	//  id prize_fund participants lucky_nums i
      }>ELSE<{
        SWAP	//  id prize_fund participants lucky_nums i
      }>
    }>	//  id prize_fund participants lucky_nums i
    DROP	//  id prize_fund participants lucky_nums
    0 PUSHINT	//  id prize_fund participants lucky_nums c1=0
    s0 s0 PUSH2	//  id prize_fund participants lucky_nums c1=0 c2=0 c3=0
    NEWDICT	//  id prize_fund participants lucky_nums c1=0 c2=0 c3=0 d1
    NEWDICT	//  id prize_fund participants lucky_nums c1=0 c2=0 c3=0 d1 d2
    NEWDICT	//  id prize_fund participants lucky_nums c1=0 c2=0 c3=0 d1 d2 d3
    -1 PUSHINT	//  id prize_fund participants lucky_nums c1=0 c2=0 c3=0 d1 d2 d3 i=-1
    UNTIL:<{
      s8 PUSH
      8 PUSHPOW2	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 i participants _37=256
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 nums i f
      DUP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 nums i f f
      IF:<{	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 nums i f
        s0 s2 XCHG	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i nums
        8 LDU	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i _44 nums
        8 LDU	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i _44 _47 nums
        8 LDU	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n1 n2 n3 nums
        ENDS
        0 PUSHINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n1 n2 n3 ff=0
        s3 s12 XCPU
        8 PUSHINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff=0 n2 n3 n1 lucky_nums _58=8
        DICTUGET
        NULLSWAPIFNOT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff=0 n2 n3 _165 _166
        NIP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff=0 n2 n3 f1
        IF:<{	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff=0 n2 n3
          s2 POP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 n2
          1 PUSHINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 n2 ff
        }>ELSE<{
          s0 s2 XCHG	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 n2 ff
        }>
        s1 s11 XCPU
        8 PUSHINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff n2 lucky_nums _63=8
        DICTUGET
        NULLSWAPIFNOT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff _167 _168
        NIP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff f1
        IF:<{	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff
          INC	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff
        }>	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i n3 ff
        s1 s10 XCPU
        8 PUSHINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff n3 lucky_nums _68=8
        DICTUGET
        NULLSWAPIFNOT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff _169 _170
        NIP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff f1
        IF:<{	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff
          INC	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff
        }>	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff
        DUP	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff ff
        3 EQINT	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff _73
        IF:<{	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 f i ff
          s0 s6 XCHG	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 d3 f i c3
          INC	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 d3 f i c3
          NEWC	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 d3 f i c3 _77
          SWAP
          8 PUSHPOW2
          s3 s5 s5 PUXC2	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i _77 i d3 _78=256
          DICTUSETB	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i d3
        }>ELSE<{
          s0 s6 XCHG
          s0 s3 XCHG	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i d3
        }>
        s6 PUSH	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i d3 ff
        2 EQINT	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i d3 _81
        IF:<{	//  id prize_fund participants lucky_nums c1 c2 ff d1 d2 c3 f i d3
          s0 s7 XCHG	//  id prize_fund participants lucky_nums c1 d3 ff d1 d2 c3 f i c2
          INC	//  id prize_fund participants lucky_nums c1 d3 ff d1 d2 c3 f i c2
          NEWC	//  id prize_fund participants lucky_nums c1 d3 ff d1 d2 c3 f i c2 _85
          SWAP
          8 PUSHPOW2
          s3 s6 s6 PUXC2	//  id prize_fund participants lucky_nums c1 d3 ff d1 c2 c3 f i _85 i d2 _86=256
          DICTUSETB	//  id prize_fund participants lucky_nums c1 d3 ff d1 c2 c3 f i d2
        }>ELSE<{
          s0 s7 XCHG
          s0 s4 XCHG	//  id prize_fund participants lucky_nums c1 d3 ff d1 c2 c3 f i d2
        }>
        s0 s6 XCHG	//  id prize_fund participants lucky_nums c1 d3 d2 d1 c2 c3 f i ff
        1 EQINT	//  id prize_fund participants lucky_nums c1 d3 d2 d1 c2 c3 f i _89
        IF:<{	//  id prize_fund participants lucky_nums c1 d3 d2 d1 c2 c3 f i
          s0 s7 XCHG	//  id prize_fund participants lucky_nums i d3 d2 d1 c2 c3 f c1
          INC	//  id prize_fund participants lucky_nums i d3 d2 d1 c2 c3 f c1
          NEWC	//  id prize_fund participants lucky_nums i d3 d2 d1 c2 c3 f c1 _93
          SWAP
          8 PUSHPOW2
          s9 s6 s6 PUXC2	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 f _93 i d1 _94=256
          DICTUSETB	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 f d1
        }>ELSE<{
          s0 s7 XCHG
          s0 s4 XCHG	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 f d1
        }>
      }>ELSE<{
        s1 s8 XCHG
        5 3 REVERSE
        s1 s5 XCHG
        s3 s4 XCHG
        s2 POP	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 f d1
      }>
      SWAP	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 d1 f
      NOT	//  id prize_fund participants lucky_nums i d3 d2 c1 c2 c3 d1 _96
      s4 s7 XCHG
      s3 s6 XCHG
      s5 s4 s0 XCHG3
      s2 s3 XCHG	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 i _96
    }>	//  id prize_fund participants lucky_nums c1 c2 c3 d1 d2 d3 i
    DROP
    s7 POP	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2
    s7 PUSH	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 prize_fund
    6 MULCONST	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 _99
    10 PUSHINT	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 _99 _100=10
    DIV	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3
    s8 PUSH	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 prize_fund
    1 LSHIFT#	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 _104
    10 PUSHINT	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 _104 _105=10
    DIV	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2
    s9 PUSH	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 prize_fund
    17 MULCONST	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 _109
    100 PUSHINT	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 _109 _110=100
    DIV	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 pf1
    s10 PUSH	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 pf1 prize_fund
    3 MULCONST	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 pf1 _114
    100 PUSHINT	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 pf1 _114 _115=100
    DIV	//  id prize_fund d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 pf1 commision
    s1 s11 XCHG	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 prize_fund commision
    SUB	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund
    0 PUSHINT	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0
    s0 s0 s8 PUSH3	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 p2=0 p1=0 c1
    0 GTINT	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 p2=0 p1=0 _126
    IF:<{	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 p2=0 p1=0
      DROP	//  id pf1 d3 lucky_nums c1 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 p2=0
      s12 s9 PUXC	//  id pf1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 pf1 c1
      DIV	//  id pf1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 next_round_fund p3=0 p1
      s2 s12 XCHG2	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund pf1
      SUB	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund
    }>ELSE<{
      s3 s10 s13 XCHG3
      2DROP	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund
    }>
    s7 PUSH	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund c2
    0 GTINT	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund _130
    IF:<{	//  id p1 d3 lucky_nums p2=0 c2 c3 d1 d2 pf3 pf2 p3=0 next_round_fund
      s8 POP	//  id p1 d3 lucky_nums next_round_fund c2 c3 d1 d2 pf3 pf2 p3=0
      s1 s6 PUXC	//  id p1 d3 lucky_nums next_round_fund p3=0 c3 d1 d2 pf3 pf2 pf2 c2
      DIV	//  id p1 d3 lucky_nums next_round_fund p3=0 c3 d1 d2 pf3 pf2 p2
      s7 s7 XCHG2	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund pf2
      SUB	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund
    }>ELSE<{
      s7 s2 XCHG2
      2DROP	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund
    }>
    s4 PUSH	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund c3
    0 GTINT	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund _134
    IF:<{	//  id p1 d3 lucky_nums p2 p3=0 c3 d1 d2 pf3 next_round_fund
      s5 POP	//  id p1 d3 lucky_nums p2 next_round_fund c3 d1 d2 pf3
      s0 s3 PUXC	//  id p1 d3 lucky_nums p2 next_round_fund pf3 d1 d2 pf3 c3
      DIV	//  id p1 d3 lucky_nums p2 next_round_fund pf3 d1 d2 p3
      s4 s3 XCHG2	//  id p1 d3 lucky_nums p2 d2 p3 d1 next_round_fund pf3
      SUB	//  id p1 d3 lucky_nums p2 d2 p3 d1 next_round_fund
    }>ELSE<{
      s2 s5 XCHG
      s0 s1 s4 XCHG3
      2DROP	//  id p1 d3 lucky_nums p2 d2 p3 d1 next_round_fund
    }>
    s0 s8 XCHG	//  next_round_fund p1 d3 lucky_nums p2 d2 p3 d1 id
    INC	//  next_round_fund p1 d3 lucky_nums p2 d2 p3 d1 _138
    NEWDICT	//  next_round_fund p1 d3 lucky_nums p2 d2 p3 d1 _138 _139
    s1 s9 s0 XCHG3	//  d1 p1 d3 lucky_nums p2 d2 p3 _138 next_round_fund _139
    pack_round CALLDICT	//  d1 p1 d3 lucky_nums p2 d2 p3 round
    NEWC	//  d1 p1 d3 lucky_nums p2 d2 p3 round _142
    s1 s5 XCHG	//  d1 p1 d3 round p2 d2 p3 lucky_nums _142
    STDICT	//  d1 p1 d3 round p2 d2 p3 _143
    s0 s6 XCHG2	//  d1 p3 d3 round p2 d2 _143 p1
    STGRAMS	//  d1 p3 d3 round p2 d2 _144
    ROT	//  d1 p3 d3 round d2 _144 p2
    STGRAMS	//  d1 p3 d3 round d2 _145
    s0 s4 XCHG2	//  d1 d2 d3 round _145 p3
    STGRAMS	//  d1 d2 d3 round _146
    s1 s4 XCHG	//  round d2 d3 d1 _146
    STDICT	//  round d2 d3 _147
    s1 s2 XCHG	//  round d3 d2 _147
    STDICT	//  round d3 _148
    STDICT	//  round _149
    ENDC	//  round old_round
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_cell in_msg
    SWAP	//  msg_value in_msg in_msg_cell
    CTOS	//  msg_value in_msg cs
    4 LDU	//  msg_value in_msg flags cs
    LDMSGADDR	//  msg_value in_msg flags _95 _94
    DROP	//  msg_value in_msg flags s_addr
    SWAP
    1 PUSHINT	//  msg_value in_msg s_addr flags _12=1
    AND	//  msg_value in_msg s_addr _13
    s2 PUSH	//  msg_value in_msg s_addr _13 in_msg
    SEMPTY	//  msg_value in_msg s_addr _13 _14
    OR	//  msg_value in_msg s_addr _15
    IFJMP:<{	//  msg_value in_msg s_addr
      3 BLKDROP	// 
    }>	//  msg_value in_msg s_addr
    SWAP	//  msg_value s_addr in_msg
    32 LDU	//  msg_value s_addr op in_msg
    OVER	//  msg_value s_addr op in_msg op
    1 EQINT	//  msg_value s_addr op in_msg _21
    IFJMP:<{	//  msg_value s_addr op in_msg
      NIP	//  msg_value s_addr in_msg
      SWAP	//  msg_value in_msg s_addr
      REWRITESTDADDR	//  msg_value in_msg _98 _99
      NIP	//  msg_value in_msg addr
      SWAP	//  msg_value addr in_msg
      32 LDU	//  msg_value addr msg_round_id in_msg
      8 LDU	//  msg_value addr msg_round_id _32 in_msg
      8 LDU	//  msg_value addr msg_round_id _32 _35 in_msg
      8 LDU	//  msg_value addr msg_round_id n1 n2 n3 in_msg
      ENDS
      NEWC	//  msg_value addr msg_round_id n1 n2 n3 _43
      s1 s3 XCHG	//  msg_value addr msg_round_id n3 n2 n1 _43
      8 STU	//  msg_value addr msg_round_id n3 n2 _45
      8 STU	//  msg_value addr msg_round_id n3 _47
      8 STU	//  msg_value addr msg_round_id nums
      load_data CALLDICT	//  msg_value addr msg_round_id nums round old_round seqno owner
      s0 s3 XCHG	//  msg_value addr msg_round_id nums owner old_round seqno round
      unpack_round CALLDICT	//  msg_value addr msg_round_id nums owner old_round seqno id prize_fund participants
      s7 s2 XCPU	//  msg_value addr participants nums owner old_round seqno id prize_fund msg_round_id id
      EQUAL	//  msg_value addr participants nums owner old_round seqno id prize_fund _60
      39 THROWIFNOT
      s5 s7 s6 XCHG3
      8 PUSHPOW2	//  msg_value id prize_fund seqno owner old_round nums addr participants _63=256
      DICTUSETB	//  msg_value id prize_fund seqno owner old_round participants
      s4 s6 XCHG2	//  participants id old_round seqno owner prize_fund msg_value
      ADD	//  participants id old_round seqno owner _65
      s4 s0 s5 XCHG3	//  owner seqno old_round id _65 participants
      pack_round CALLDICT	//  owner seqno old_round round
      s2 s3 XCHG2	//  round old_round seqno owner
      save_data CALLDICT
    }>	//  msg_value s_addr op in_msg
    s2 POP	//  msg_value in_msg op
    DUP	//  msg_value in_msg op op
    2 EQINT	//  msg_value in_msg op _69
    IFJMP:<{	//  msg_value in_msg op
      DROP	//  msg_value in_msg
      ENDS
      load_data CALLDICT	//  msg_value round old_round seqno owner
      s0 s3 XCHG	//  msg_value owner old_round seqno round
      unpack_round CALLDICT	//  msg_value owner old_round seqno id prize_fund participants
      s0 s6 XCHG	//  participants owner old_round seqno id prize_fund msg_value
      ADD	//  participants owner old_round seqno id _80
      s1 s0 s5 XCHG3	//  seqno owner old_round id _80 participants
      pack_round CALLDICT	//  seqno owner old_round round
      s1 s3 s3 XCHG3	//  round old_round seqno owner
      save_data CALLDICT
    }>	//  msg_value in_msg op
    NIP
    NIP	//  op
    DUP	//  op op
    0 EQINT	//  op _85
    SWAP
    31 PUSHPOW2	//  _85 op _88
    AND	//  _85 _89
    OR	//  _90
    37 THROWIFNOT
  }>
  recv_external PROC:<{
    //  in_msg
    9 PUSHPOW2	//  in_msg _3=512
    LDSLICEX	//  signature in_msg
    DUP	//  signature in_msg cs
    32 LDU	//  signature in_msg _9 cs
    32 LDU	//  signature in_msg _9 _12 cs
    32 LDU	//  signature in_msg msg_seqno valid_until op cs
    NOW	//  signature in_msg msg_seqno valid_until op cs _19
    s1 s3 XCHG	//  signature in_msg msg_seqno cs op valid_until _19
    LEQ	//  signature in_msg msg_seqno cs op _20
    35 THROWIF
    load_data CALLDICT	//  signature in_msg msg_seqno cs op round old_round seqno owner
    s6 s1 XCPU	//  signature in_msg owner cs op round old_round seqno msg_seqno seqno
    EQUAL	//  signature in_msg owner cs op round old_round seqno _28
    33 THROWIFNOT
    s0 s6 XCHG	//  signature seqno owner cs op round old_round in_msg
    HASHSU	//  signature seqno owner cs op round old_round _31
    s0 s7 s5 XC2PU	//  old_round seqno owner cs op round _31 signature owner
    CHKSIGNU	//  old_round seqno owner cs op round _32
    34 THROWIFNOT
    ACCEPT
    OVER	//  old_round seqno owner cs op round op
    1 EQINT	//  old_round seqno owner cs op round _36
    IF:<{	//  old_round seqno owner cs op round
      s0 s2 XCHG	//  old_round seqno owner round op cs
      WHILE:<{
        DUP	//  old_round seqno owner round op cs cs
        SREFS	//  old_round seqno owner round op cs _39
      }>DO<{	//  old_round seqno owner round op cs
        8 LDU	//  old_round seqno owner round op mode cs
        LDREF	//  old_round seqno owner round op mode _44 cs
        s0 s2 XCHG	//  old_round seqno owner round op cs _44 mode
        SENDRAWMSG
      }>	//  old_round seqno owner round op cs
      DUP	//  old_round seqno owner round op cs cs
      ENDS
    }>ELSE<{
      s0 s2 XCHG	//  old_round seqno owner round op cs
    }>
    OVER	//  old_round seqno owner round op cs op
    2 EQINT	//  old_round seqno owner round op cs _49
    IF:<{	//  old_round seqno owner round op cs
      s5 POP	//  cs seqno owner round op
      s0 s4 XCHG	//  op seqno owner round cs
      ENDS
      conduct_round CALLDICT	//  op seqno owner round old_round
    }>ELSE<{
      s1 s5 XCHG
      DROP	//  op seqno owner round old_round
    }>
    s0 s4 XCHG	//  old_round seqno owner round op
    3 EQINT	//  old_round seqno owner round _53
    DROP	//  old_round seqno owner round
    s0 s2 XCHG	//  old_round round owner seqno
    INC	//  old_round round owner _55
    s2 s3 XCHG
    SWAP	//  round old_round _55 owner
    save_data CALLDICT
  }>
  seqno PROC:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    SKIPDICT	//  _2
    SKIPDICT	//  _3
    32 PLDU	//  _5
  }>
  prize_fund PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    PLDDICT	//  round
    DUP	//  round round
    ISNULL	//  round _4
    IF:<{	//  round
      DROP	// 
      0 PUSHINT	//  _5=0
    }>ELSE<{	//  round
      CTOS	//  _7
      32 PUSHINT	//  _7 _8=32
      SDSKIPFIRST	//  _9
      LDGRAMS
      DROP	//  _5
    }>
  }>
  lucky_nums PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IF:<{	//  old_round
      DROP	// 
      NEWC	//  _7
      ENDC	//  _6
    }>ELSE<{	//  old_round
      CTOS	//  _9
      PLDDICT	//  _6
    }>
  }>
  lucky_nums2 PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      NEWC	//  _6
      ENDC	//  _7
    }>	//  old_round
    CTOS	//  _9
    PLDDICT	//  lucky_nums
    NEWC	//  lucky_nums res
    -1 PUSHINT	//  lucky_nums res i=-1
    UNTIL:<{
      s2 PUSH
      8 PUSHINT	//  lucky_nums res i lucky_nums _17=8
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT	//  lucky_nums res _25 _24 _26
      s2 POP	//  lucky_nums res f i
      OVER	//  lucky_nums res f i f
      IF:<{	//  lucky_nums res f i
        s0 s2 PUXC	//  lucky_nums i f i res
        8 STU	//  lucky_nums i f res
      }>ELSE<{
        s0 s2 XCHG	//  lucky_nums i f res
      }>
      SWAP	//  lucky_nums i res f
      NOT	//  lucky_nums i res _22
      s1 s2 XCHG	//  lucky_nums res i _22
    }>	//  lucky_nums res i
    DROP
    NIP	//  res
    ENDC	//  _23
  }>
  winners PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      0 PUSHINT	//  _6=0
      s0 s0 PUSH2	//  _6=0 _7=0 _8=0
      NEWDICT	//  _6=0 _7=0 _8=0 _9
      NEWDICT	//  _6=0 _7=0 _8=0 _9 _10
      NEWDICT	//  _6=0 _7=0 _8=0 _9 _10 _11
    }>	//  old_round
    CTOS	//  _13
    SKIPDICT	//  old_round_s
    LDGRAMS	//  _18 old_round_s
    LDGRAMS	//  _18 _20 old_round_s
    LDGRAMS	//  p1 p2 p3 old_round_s
    LDDICT	//  p1 p2 p3 _27 old_round_s
    LDDICT	//  p1 p2 p3 _27 _29 old_round_s
    LDDICT	//  p1 p2 p3 _27 _29 _44 _43
    DROP	//  p1 p2 p3 d1 d2 d3
  }>
  is_winner PROC:<{
    //  addr
    c4 PUSH	//  addr _2
    CTOS	//  addr _3
    SKIPDICT	//  addr _4
    PLDDICT	//  addr old_round
    DUP	//  addr old_round old_round
    ISNULL	//  addr old_round _6
    IFJMP:<{	//  addr old_round
      2DROP	// 
      0 PUSHINT	//  _7=0
    }>	//  addr old_round
    CTOS	//  addr _9
    SKIPDICT	//  addr old_round_s
    LDGRAMS	//  addr _14 old_round_s
    LDGRAMS	//  addr _14 _16 old_round_s
    LDGRAMS	//  addr p1 p2 p3 old_round_s
    LDDICT	//  addr p1 p2 p3 _23 old_round_s
    LDDICT	//  addr p1 p2 p3 _23 _25 old_round_s
    LDDICT	//  addr p1 p2 p3 _23 _25 _51 _50
    DROP	//  addr p1 p2 p3 d1 d2 d3
    8 PUSHPOW2	//  addr p1 p2 p3 d1 d2 d3 _31=256
    s7 s3 s3 PUXC2	//  addr p1 p2 p3 d3 d2 addr d1 _31=256
    DICTUGET
    NULLSWAPIFNOT	//  addr p1 p2 p3 d3 d2 _52 _53
    NIP	//  addr p1 p2 p3 d3 d2 f
    IFJMP:<{	//  addr p1 p2 p3 d3 d2
      s4 s5 XCHG
      5 BLKDROP	//  p1
    }>	//  addr p1 p2 p3 d3 d2
    s4 POP	//  addr d2 p2 p3 d3
    8 PUSHPOW2	//  addr d2 p2 p3 d3 _34=256
    s5 s4 s4 PUXC2	//  addr d3 p2 p3 addr d2 _34=256
    DICTUGET
    NULLSWAPIFNOT	//  addr d3 p2 p3 _54 _55
    NIP	//  addr d3 p2 p3 f
    IFJMP:<{	//  addr d3 p2 p3
      s1 s3 XCHG
      3 BLKDROP	//  p2
    }>	//  addr d3 p2 p3
    NIP	//  addr d3 p3
    -ROT
    8 PUSHPOW2	//  p3 addr d3 _37=256
    DICTUGET
    NULLSWAPIFNOT	//  p3 _56 _57
    NIP	//  p3 f
    IFJMP:<{	//  p3
    }>	//  p3
    DROP	// 
    0 PUSHINT	//  _39=0
  }>
}END>c
