// automatically generated from `/mnt/c/Work3/ton/crypto/smartcont/stdlib.fc` `code.fc` 
PROGRAM{
  DECLPROC load_data
  DECLPROC save_data
  DECLPROC unpack_round
  DECLPROC pack_round
  DECLPROC unpack_old_round
  DECLPROC pack_old_round
  DECLPROC send_message_back
  DECLPROC buy_ticket
  DECLPROC comment_to_nums
  DECLPROC sponsor_prize_fund
  DECLPROC withdraw_prize
  DECLPROC conduct_round
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  79045 DECLMETHOD prize_fund
  84929 DECLMETHOD lucky_nums
  128887 DECLMETHOD winners
  118635 DECLMETHOD is_winner
  98949 DECLMETHOD comsa
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    LDDICT	//  _4 ds
    LDDICT	//  _4 _6 ds
    LDGRAMS	//  _4 _6 _8 ds
    32 LDU	//  _4 _6 _8 _10 ds
    256 LDU	//  res res res res res ds
    ENDS
  }>
  save_data PROC:<{
    //  round old_round comsa seqno owner
    s0 s4 XCHG
    NEWC	//  owner old_round comsa seqno round _5
    STDICT	//  owner old_round comsa seqno _6
    s1 s3 XCHG	//  owner seqno comsa old_round _6
    STDICT	//  owner seqno comsa _7
    SWAP	//  owner seqno _7 comsa
    STGRAMS	//  owner seqno _8
    32 STU	//  owner _10
    256 STU	//  _12
    ENDC	//  _13
    c4 POP
  }>
  unpack_round PROC:<{
    //  round
    DUP	//  round round
    ISNULL	//  round _1
    IFJMP:<{	//  round
      DROP	// 
      0 PUSHINT	//  _2=0
      NEWDICT	//  _2=0 _3
    }>	//  round
    CTOS	//  ds
    LDGRAMS	//  _7 ds
    LDDICT	//  res res ds
    ENDS
  }>
  pack_round PROC:<{
    //  prize_fund participants
    NEWC
    ROT	//  participants _2 prize_fund
    STGRAMS	//  participants _3
    STDICT	//  _4
    ENDC	//  _5
  }>
  unpack_old_round PROC:<{
    //  old_round
    CTOS	//  ds
    LDDICT	//  _4 ds
    LDGRAMS	//  _4 _6 ds
    LDGRAMS	//  _4 _6 _8 ds
    LDGRAMS	//  _4 _6 _8 _10 ds
    LDDICT	//  res res res res res ds
    ENDS
  }>
  pack_old_round PROC:<{
    //  lucky_nums prize1 prize2 prize3 winners
    s0 s4 XCHG
    NEWC	//  winners prize1 prize2 prize3 lucky_nums _5
    STDICT	//  winners prize1 prize2 prize3 _6
    s0 s3 XCHG2	//  winners prize3 prize2 _6 prize1
    STGRAMS	//  winners prize3 prize2 _7
    SWAP	//  winners prize3 _7 prize2
    STGRAMS	//  winners prize3 _8
    SWAP	//  winners _8 prize3
    STGRAMS	//  winners _9
    STDICT	//  _10
    ENDC	//  _11
  }>
  send_message_back PROC:<{
    //  addr ans_tag query_id body grams mode
    0 PUSHINT	//  addr ans_tag query_id body grams mode _7=0
    24 PUSHINT	//  addr ans_tag query_id body grams mode _7=0 _8=24
    NEWC	//  addr ans_tag query_id body grams mode _7=0 _8=24 _9
    6 STU	//  addr ans_tag query_id body grams mode _7=0 _11
    s0 s7 XCHG2	//  _7=0 ans_tag query_id body grams mode _11 addr
    STSLICER	//  _7=0 ans_tag query_id body grams mode _12
    ROT	//  _7=0 ans_tag query_id body mode _12 grams
    STGRAMS	//  _7=0 ans_tag query_id body mode _13
    s1 s5 XCHG	//  mode ans_tag query_id body _7=0 _13
    107 STU	//  mode ans_tag query_id body _27
    s1 s3 XCHG	//  mode body query_id ans_tag _27
    32 STU	//  mode body query_id _29
    64 STU	//  mode body msg
    OVER	//  mode body msg body
    -1 GTINT	//  mode body msg _33
    IF:<{	//  mode body msg
      32 STU	//  mode msg
    }>ELSE<{
      NIP	//  mode msg
    }>
    ENDC	//  mode _37
    SWAP	//  _37 mode
    SENDRAWMSG
  }>
  buy_ticket PROC:<{
    //  s_addr msg_value in_msg query_id
    s2 PUSH
    1000000000 PUSHINT	//  s_addr msg_value in_msg query_id msg_value _4=1000000000
    LESS	//  s_addr msg_value in_msg query_id _5
    IFJMP:<{	//  s_addr msg_value in_msg query_id
      NIP
      2147483649 PUSHINT
      s2 POP
      1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _6=2147483649 query_id _7=1 _8=0 _9=64
      send_message_back CALLDICT
    }>	//  s_addr msg_value in_msg query_id
    s3 PUSH	//  s_addr msg_value in_msg query_id s_addr
    REWRITESTDADDR	//  s_addr msg_value in_msg query_id wc addr
    s0 s3 XCHG	//  s_addr msg_value addr query_id wc in_msg
    8 LDU	//  s_addr msg_value addr query_id wc _17 in_msg
    8 LDU	//  s_addr msg_value addr query_id wc _17 _20 in_msg
    8 LDU	//  s_addr msg_value addr query_id wc n1 n2 n3 in_msg
    ENDS
    s2 s1 PUSH2	//  s_addr msg_value addr query_id wc n1 n2 n3 n1 n2
    EQUAL	//  s_addr msg_value addr query_id wc n1 n2 n3 _27
    s3 s1 PUSH2	//  s_addr msg_value addr query_id wc n1 n2 n3 _27 n1 n3
    EQUAL	//  s_addr msg_value addr query_id wc n1 n2 n3 _27 _28
    OR	//  s_addr msg_value addr query_id wc n1 n2 n3 _29
    s2 s1 PUSH2	//  s_addr msg_value addr query_id wc n1 n2 n3 _29 n2 n3
    EQUAL	//  s_addr msg_value addr query_id wc n1 n2 n3 _29 _30
    OR	//  s_addr msg_value addr query_id wc n1 n2 n3 _31
    IFJMP:<{	//  s_addr msg_value addr query_id wc n1 n2 n3
      s4 s5 XCHG
      5 BLKDROP
      2147483649 PUSHINT
      s2 POP
      2 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _32=2147483649 query_id _33=2 _34=0 _35=64
      send_message_back CALLDICT
    }>	//  s_addr msg_value addr query_id wc n1 n2 n3
    s2 PUSH	//  s_addr msg_value addr query_id wc n1 n2 n3 n1
    99 GTINT	//  s_addr msg_value addr query_id wc n1 n2 n3 _38
    s2 PUSH	//  s_addr msg_value addr query_id wc n1 n2 n3 _38 n2
    99 GTINT	//  s_addr msg_value addr query_id wc n1 n2 n3 _38 _40
    OR	//  s_addr msg_value addr query_id wc n1 n2 n3 _41
    OVER	//  s_addr msg_value addr query_id wc n1 n2 n3 _41 n3
    99 GTINT	//  s_addr msg_value addr query_id wc n1 n2 n3 _41 _43
    OR	//  s_addr msg_value addr query_id wc n1 n2 n3 _44
    IFJMP:<{	//  s_addr msg_value addr query_id wc n1 n2 n3
      s4 s5 XCHG
      5 BLKDROP
      2147483649 PUSHINT
      s2 POP
      5 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _45=2147483649 query_id _46=5 _47=0 _48=64
      send_message_back CALLDICT
    }>	//  s_addr msg_value addr query_id wc n1 n2 n3
    load_data CALLDICT	//  s_addr msg_value addr query_id wc n1 n2 n3 round old_round comsa seqno owner
    s0 s4 XCHG	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno round
    unpack_round CALLDICT	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants
    s9 s0 PUSH2
    8 PUSHINT	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc participants _61=8
    DICTIGET
    NULLSWAPIFNOT	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc_participants_s f
    IF:<{	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc_participants_s
      LDDICT	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc_participants wc_participants_s
      ENDS
    }>ELSE<{	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc_participants_s
      DROP	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants
      NEWDICT	//  s_addr msg_value addr query_id wc n1 n2 n3 owner old_round comsa seqno prize_fund participants wc_participants
    }>
    s0 s9 XCHG
    NEWC	//  s_addr msg_value addr query_id wc wc_participants n2 n3 owner old_round comsa seqno prize_fund participants n1 _70
    8 STU	//  s_addr msg_value addr query_id wc wc_participants n2 n3 owner old_round comsa seqno prize_fund participants _72
    s1 s8 XCHG	//  s_addr msg_value addr query_id wc wc_participants participants n3 owner old_round comsa seqno prize_fund n2 _72
    8 STU	//  s_addr msg_value addr query_id wc wc_participants participants n3 owner old_round comsa seqno prize_fund _74
    s1 s6 XCHG	//  s_addr msg_value addr query_id wc wc_participants participants prize_fund owner old_round comsa seqno n3 _74
    8 STU	//  s_addr msg_value addr query_id wc wc_participants participants prize_fund owner old_round comsa seqno nums
    s0 s10 s7 XCHG3
    8 PUSHPOW2	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round nums addr wc_participants _79=256
    DICTUADDB	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round wc_participants f
    IFNOTJMP:<{	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round wc_participants
      s7 s8 XCHG
      8 BLKDROP
      2147483649 PUSHINT
      s2 POP
      3 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _81=2147483649 query_id _82=3 _83=0 _84=64
      send_message_back CALLDICT
    }>	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round wc_participants
    NEWC	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round wc_participants _87
    STDICT	//  s_addr msg_value seqno query_id wc comsa participants prize_fund owner old_round _88
    s0 s6 s4 XCHG3
    8 PUSHINT	//  s_addr msg_value seqno query_id old_round comsa owner prize_fund _88 wc participants _89=8
    DICTISETB	//  s_addr msg_value seqno query_id old_round comsa owner prize_fund participants
    SWAP
    1000000000 PUSHINT	//  s_addr msg_value seqno query_id old_round comsa owner participants prize_fund _91=1000000000
    ADD	//  s_addr msg_value seqno query_id old_round comsa owner participants _92
    SWAP	//  s_addr msg_value seqno query_id old_round comsa owner _92 participants
    pack_round CALLDICT	//  s_addr msg_value seqno query_id old_round comsa owner round
    s0 s4 XCHG
    s5 s5 XCHG2	//  s_addr msg_value query_id round old_round comsa seqno owner
    save_data CALLDICT
    OVER
    1000000000 PUSHINT	//  s_addr msg_value query_id msg_value _95=1000000000
    GREATER	//  s_addr msg_value query_id _96
    IF:<{	//  s_addr msg_value query_id
      20 PUSHINT	//  s_addr msg_value query_id _97=20
      0 PUSHINT	//  s_addr msg_value query_id _97=20 _98=0
      s0 s3 XCHG
      1000000000 PUSHINT	//  s_addr _98=0 query_id _97=20 msg_value _99=1000000000
      SUB	//  s_addr _98=0 query_id _97=20 _100
      s1 s3 XCHG
      2 PUSHINT	//  s_addr _97=20 query_id _98=0 _100 _101=2
      send_message_back CALLDICT
    }>ELSE<{
      3 BLKDROP	// 
    }>
  }>
  comment_to_nums PROC:<{
    //  in_msg
    NEWC	//  in_msg nums
    0 PUSHINT	//  in_msg nums nums_count=0
    PUSHNULL	//  in_msg nums nums_count=0 l
    UNTIL:<{
      32 PUSHINT	//  in_msg nums nums_count l char=32
      s4 PUSH	//  in_msg nums nums_count l char=32 in_msg
      SEMPTY	//  in_msg nums nums_count l char=32 _13
      IFNOT:<{	//  in_msg nums nums_count l char=32
        DROP	//  in_msg nums nums_count l
        s0 s3 XCHG	//  l nums nums_count in_msg
        8 LDU	//  l nums nums_count char in_msg
        s4 s4 XCHG2	//  in_msg nums nums_count l char
      }>	//  in_msg nums nums_count l char
      DUP	//  in_msg nums nums_count l char char
      32 EQINT	//  in_msg nums nums_count l char _18
      IF:<{	//  in_msg nums nums_count l char
        DROP	//  in_msg nums nums_count l
        0 PUSHINT	//  in_msg nums nums_count l num=0
        1 PUSHINT	//  in_msg nums nums_count l num=0 order=1
        UNTIL:<{
          s0 s2 XCHG	//  in_msg nums nums_count order num l
          UNCONS	//  in_msg nums nums_count order num n l
          SWAP	//  in_msg nums nums_count order num l n
          -48 ADDCONST	//  in_msg nums nums_count order num l _26
          s3 PUSH	//  in_msg nums nums_count order num l _26 order
          MUL	//  in_msg nums nums_count order num l _27
          s1 s2 XCHG	//  in_msg nums nums_count order l num _27
          ADD	//  in_msg nums nums_count order l num
          s0 s2 XCHG	//  in_msg nums nums_count num l order
          10 MULCONST	//  in_msg nums nums_count num l order
          OVER	//  in_msg nums nums_count num l order l
          ISNULL	//  in_msg nums nums_count num l order _31
          s2 s3 XCHG	//  in_msg nums nums_count l num order _31
        }>	//  in_msg nums nums_count l num order
        DROP	//  in_msg nums nums_count l num
        s0 s3 XCHG2	//  in_msg l nums_count num nums
        8 STU	//  in_msg l nums_count nums
        SWAP	//  in_msg l nums nums_count
        INC	//  in_msg l nums nums_count
      }>ELSE<{	//  in_msg nums nums_count l char
        SWAP	//  in_msg nums nums_count char l
        CONS	//  in_msg nums nums_count l
        -ROT	//  in_msg l nums nums_count
      }>
      DUP	//  in_msg l nums nums_count nums_count
      3 EQINT	//  in_msg l nums nums_count _39
      s1 s3 s0 XCHG3	//  in_msg nums nums_count l _39
    }>	//  in_msg nums nums_count l
    s2 s3 XCHG
    3 BLKDROP	//  nums
    ENDC	//  _40
    TRUE	//  _40 _41
  }>
  sponsor_prize_fund PROC:<{
    //  msg_value
    load_data CALLDICT	//  msg_value round old_round comsa seqno owner
    s0 s4 XCHG	//  msg_value owner old_round comsa seqno round
    unpack_round CALLDICT	//  msg_value owner old_round comsa seqno prize_fund participants
    s0 s6 XCHG	//  participants owner old_round comsa seqno prize_fund msg_value
    ADD	//  participants owner old_round comsa seqno _10
    s0 s5 XCHG2	//  seqno owner old_round comsa _10 participants
    pack_round CALLDICT	//  seqno owner old_round comsa round
    s1 s4 s4 XCHG3
    s0 s3 XCHG	//  round old_round comsa seqno owner
    save_data CALLDICT
  }>
  withdraw_prize PROC:<{
    //  s_addr query_id
    OVER	//  s_addr query_id s_addr
    REWRITESTDADDR	//  s_addr query_id wc addr
    load_data CALLDICT	//  s_addr query_id wc addr round old_round comsa seqno owner
    s3 PUSH	//  s_addr query_id wc addr round old_round comsa seqno owner old_round
    ISNULL	//  s_addr query_id wc addr round old_round comsa seqno owner _11
    IFJMP:<{	//  s_addr query_id wc addr round old_round comsa seqno owner
      7 BLKDROP	//  s_addr query_id
      4294967294 PUSHINT	//  s_addr query_id _12=4294967294
      SWAP
      -1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _12=4294967294 query_id _13=-1 _14=0 _15=64
      send_message_back CALLDICT
    }>	//  s_addr query_id wc addr round old_round comsa seqno owner
    s0 s3 XCHG	//  s_addr query_id wc addr round owner comsa seqno old_round
    unpack_old_round CALLDICT	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners
    s10 s0 PUSH2
    8 PUSHINT	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners wc winners _25=8
    DICTIGET
    NULLSWAPIFNOT	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners wc_winners_s f
    IFNOTJMP:<{	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners wc_winners_s
      12 BLKDROP	//  s_addr query_id
      4294967294 PUSHINT	//  s_addr query_id _27=4294967294
      SWAP
      -1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _27=4294967294 query_id _28=-1 _29=0 _30=64
      send_message_back CALLDICT
    }>	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners wc_winners_s
    LDDICT	//  s_addr query_id wc addr round owner comsa seqno lucky_nums prize1 prize2 prize3 winners wc_winners wc_winners_s
    ENDS
    s1 s10 XCHG
    8 PUSHPOW2	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 addr wc_winners _38=256
    DICTUDELGET
    NULLSWAPIFNOT	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums_s f
    IFNOTJMP:<{	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums_s
      12 BLKDROP	//  s_addr query_id
      4294967294 PUSHINT	//  s_addr query_id _40=4294967294
      SWAP
      -1 PUSHINT
      0 PUSHINT
      64 PUSHINT	//  s_addr _40=4294967294 query_id _41=-1 _42=0 _43=64
      send_message_back CALLDICT
    }>	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums_s
    2 LDU	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums matched_nums_s
    ENDS
    OVER	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums wc_winners
    DICTEMPTY	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums _50
    IF:<{	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums
      NIP	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 matched_nums
      s10 s9 XCHG2
      8 PUSHINT	//  s_addr query_id prize3 matched_nums round owner comsa seqno lucky_nums prize1 prize2 wc winners _57=8
      DICTIDEL	//  s_addr query_id prize3 matched_nums round owner comsa seqno lucky_nums prize1 prize2 _97 _98
      DROP	//  s_addr query_id prize3 matched_nums round owner comsa seqno lucky_nums prize1 prize2 winners
    }>ELSE<{	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 wc_winners matched_nums
      SWAP
      NEWC	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 matched_nums wc_winners _52
      STDICT	//  s_addr query_id wc winners round owner comsa seqno lucky_nums prize1 prize2 prize3 matched_nums _53
      s0 s11 s10 XCHG3
      8 PUSHINT	//  s_addr query_id matched_nums prize3 round owner comsa seqno lucky_nums prize1 prize2 _53 wc winners _54=8
      DICTISETB	//  s_addr query_id matched_nums prize3 round owner comsa seqno lucky_nums prize1 prize2 winners
      s8 s9 XCHG	//  s_addr query_id prize3 matched_nums round owner comsa seqno lucky_nums prize1 prize2 winners
    }>
    s3 s2 s(-1) XCPUXC
    s4 s10 s(-2) PU2XC	//  s_addr query_id prize3 matched_nums round owner comsa seqno prize2 prize1 lucky_nums prize1 prize2 prize3 winners
    pack_old_round CALLDICT	//  s_addr query_id prize3 matched_nums round owner comsa seqno prize2 prize1 old_round
    s4 s6 XCHG
    s6 s3 s3 XCHG3
    s0 s5 XCHG	//  s_addr query_id prize3 matched_nums prize2 prize1 round old_round comsa seqno owner
    save_data CALLDICT
    0 PUSHINT	//  s_addr query_id prize3 matched_nums prize2 prize1 amount=0
    s3 PUSH	//  s_addr query_id prize3 matched_nums prize2 prize1 amount=0 matched_nums
    1 EQINT	//  s_addr query_id prize3 matched_nums prize2 prize1 amount=0 _65
    IF:<{	//  s_addr query_id prize3 matched_nums prize2 prize1 amount=0
      DROP	//  s_addr query_id prize3 matched_nums prize2 amount
    }>ELSE<{
      NIP	//  s_addr query_id prize3 matched_nums prize2 amount
    }>
    s2 PUSH	//  s_addr query_id prize3 matched_nums prize2 amount matched_nums
    2 EQINT	//  s_addr query_id prize3 matched_nums prize2 amount _67
    IF:<{	//  s_addr query_id prize3 matched_nums prize2 amount
      DROP	//  s_addr query_id prize3 matched_nums amount
    }>ELSE<{
      NIP	//  s_addr query_id prize3 matched_nums amount
    }>
    SWAP	//  s_addr query_id prize3 amount matched_nums
    3 EQINT	//  s_addr query_id prize3 amount _69
    IF:<{	//  s_addr query_id prize3 amount
      DROP	//  s_addr query_id amount
    }>ELSE<{
      NIP	//  s_addr query_id amount
    }>
    2147483651 PUSHINT	//  s_addr query_id amount _70=2147483651
    s0 s2 XCHG
    -1 PUSHINT
    ROT
    64 PUSHINT	//  s_addr _70=2147483651 query_id _71=-1 amount _72=64
    send_message_back CALLDICT
  }>
  conduct_round PROC:<{
    //  round old_round
    OVER	//  round old_round round
    unpack_round CALLDICT	//  round old_round prize_fund participants
    DUP	//  round old_round prize_fund participants participants
    ISNULL	//  round old_round prize_fund participants _5
    IFJMP:<{	//  round old_round prize_fund participants
      2DROP	//  round old_round
      0 PUSHINT	//  round old_round _6=0
    }>	//  round old_round prize_fund participants
    2 2 BLKDROP2	//  prize_fund participants
    LTIME
    ADDRAND
    NEWDICT	//  prize_fund participants lucky_nums
    NEWC	//  prize_fund participants lucky_nums _11
    0 PUSHINT
    ROT
    8 PUSHINT	//  prize_fund participants _11 _12=0 lucky_nums _13=8
    DICTUADDB	//  prize_fund participants _157 _158
    DROP	//  prize_fund participants lucky_nums
    NEWC	//  prize_fund participants lucky_nums _16
    1 PUSHINT
    ROT
    8 PUSHINT	//  prize_fund participants _16 _17=1 lucky_nums _18=8
    DICTUADDB	//  prize_fund participants _159 _160
    DROP	//  prize_fund participants lucky_nums
    NEWC	//  prize_fund participants lucky_nums _21
    2 PUSHINT
    ROT
    8 PUSHINT	//  prize_fund participants _21 _22=2 lucky_nums _23=8
    DICTUADDB	//  prize_fund participants _161 _162
    DROP	//  prize_fund participants lucky_nums
    0 PUSHINT	//  prize_fund participants lucky_nums winners_count1=0
    s0 s0 PUSH2	//  prize_fund participants lucky_nums winners_count1=0 winners_count2=0 winners_count3=0
    NEWDICT	//  prize_fund participants lucky_nums winners_count1=0 winners_count2=0 winners_count3=0 winners
    s5 PUSH
    8 PUSHINT	//  prize_fund participants lucky_nums winners_count1=0 winners_count2=0 winners_count3=0 winners participants _36=8
    DICTIMIN
    NULLSWAPIFNOT2	//  prize_fund participants lucky_nums winners_count1=0 winners_count2=0 winners_count3=0 winners wc_participants_s wc wc_f
    WHILE:<{
    }>DO<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc_participants_s wc
      SWAP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants_s
      LDDICT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_participants_s
      ENDS
      NEWDICT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners
      -1 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr=-1
      UNTIL:<{
        s2 PUSH
        8 PUSHPOW2	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr wc_participants _48=256
        DICTUGETNEXT
        NULLSWAPIFNOT2	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners nums addr addr_f
        DUP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners nums addr addr_f addr_f
        IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners nums addr addr_f
          s0 s2 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr nums
          8 LDU	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr _55 nums
          8 LDU	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr _55 _58 nums
          8 LDU	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr n1 n2 n3 nums
          ENDS
          0 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr n1 n2 n3 matched_nums=0
          s3 s13 XCPU
          8 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums=0 n2 n3 n1 lucky_nums _69=8
          DICTUGET
          NULLSWAPIFNOT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums=0 n2 n3 _177 _178
          NIP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums=0 n2 n3 f1
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums=0 n2 n3
            1 PUSHINT
            s3 POP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n2 n3
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n2 n3
          s1 s12 XCPU
          8 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3 n2 lucky_nums _74=8
          DICTUGET
          NULLSWAPIFNOT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3 _179 _180
          NIP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3 f1
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3
            SWAP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr n3 matched_nums
            INC	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr n3 matched_nums
            SWAP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3
          s11 PUSH
          8 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums n3 lucky_nums _79=8
          DICTUGET
          NULLSWAPIFNOT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums _181 _182
          NIP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums f1
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
            INC	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          DUP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums matched_nums
          0 EQINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums _84
          IFNOT:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
            DUP
            NEWC	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums matched_nums _86
            2 STU	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums _88
            s0 s2 s4 XCPUXC
            8 PUSHPOW2	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants matched_nums addr_f addr _88 addr wc_winners _89=256
            DICTUSETB	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants matched_nums addr_f addr wc_winners
            s0 s3 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          DUP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums matched_nums
          1 EQINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums _92
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
            s0 s9 XCHG	//  prize_fund participants lucky_nums matched_nums winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr winners_count1
            INC	//  prize_fund participants lucky_nums matched_nums winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr winners_count1
            s0 s9 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          DUP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums matched_nums
          2 EQINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums _96
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
            s0 s8 XCHG	//  prize_fund participants lucky_nums winners_count1 matched_nums winners_count3 winners wc wc_participants wc_winners addr_f addr winners_count2
            INC	//  prize_fund participants lucky_nums winners_count1 matched_nums winners_count3 winners wc wc_participants wc_winners addr_f addr winners_count2
            s0 s8 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr matched_nums
          3 EQINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr _100
          IF:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr
            s0 s6 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 addr winners wc wc_participants wc_winners addr_f winners_count3
            INC	//  prize_fund participants lucky_nums winners_count1 winners_count2 addr winners wc wc_participants wc_winners addr_f winners_count3
            s0 s6 XCHG	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr
          }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr
        }>ELSE<{
          s2 POP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr_f addr
        }>
        SWAP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr addr_f
        NOT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr _103
      }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_participants wc_winners addr
      DROP
      NIP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_winners
      DUP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_winners wc_winners
      DICTEMPTY	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_winners _104
      IFNOT:<{	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_winners
        NEWC	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc wc_winners _106
        STDICT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc _107
        s0 s0 s2 XCPUXC
        8 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 wc _107 wc winners _108=8
        DICTISETB	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 wc winners
        SWAP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc
      }>ELSE<{
        DROP	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc
      }>
      s6 PUSH
      8 PUSHINT	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc participants _110=8
      DICTIGETNEXT
      NULLSWAPIFNOT2	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc_participants_s wc wc_f
    }>	//  prize_fund participants lucky_nums winners_count1 winners_count2 winners_count3 winners wc_participants_s wc
    2DROP
    s5 POP	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3
    s5 PUSH	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 prize_fund
    6 MULCONST	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 _114
    10 PUSHINT	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 _114 _115=10
    DIV	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3
    s6 PUSH	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 prize_fund
    22 MULCONST	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 _119
    100 PUSHINT	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 _119 _120=100
    DIV	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2
    s7 PUSH	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 prize_fund
    15 MULCONST	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 _124
    100 PUSHINT	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 _124 _125=100
    DIV	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1
    s8 PUSH	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 prize_fund
    3 MULCONST	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 _129
    100 PUSHINT	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 _129 _130=100
    DIV	//  prize_fund winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 comsa
    s9 s9 XCPU	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 prize_fund comsa
    SUB	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund
    0 PUSHINT	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize1=0
    s0 s0 s7 PUSH3	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0 winners_count1
    0 GTINT	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0 _141
    IF:<{	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize1=0 prize2=0 prize3=0
      s2 POP	//  comsa winners lucky_nums winners_count1 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize3=0 prize2=0
      s3 s8 PUXC	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize3=0 pf1 winners_count1
      DIV	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 pf1 next_round_fund prize3=0 prize1
      s2 s3 XCHG2	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize1 prize3=0 next_round_fund pf1
      SUB	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize1 prize3=0 next_round_fund
      ROT	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund prize1
    }>ELSE<{
      s4 POP
      s8 POP	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund prize1
    }>
    s6 PUSH	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund prize1 winners_count2
    0 GTINT	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund prize1 _145
    IF:<{	//  comsa winners lucky_nums prize2=0 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund prize1
      s7 POP	//  comsa winners lucky_nums prize1 winners_count2 winners_count3 pf3 pf2 prize3=0 next_round_fund
      s2 s5 PUXC	//  comsa winners lucky_nums prize1 next_round_fund winners_count3 pf3 pf2 prize3=0 pf2 winners_count2
      DIV	//  comsa winners lucky_nums prize1 next_round_fund winners_count3 pf3 pf2 prize3=0 prize2
      s5 s2 XCHG2	//  comsa winners lucky_nums prize1 prize3=0 winners_count3 pf3 prize2 next_round_fund pf2
      SUB	//  comsa winners lucky_nums prize1 prize3=0 winners_count3 pf3 prize2 next_round_fund
      s5 s4 XCHG2	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1 prize3=0
    }>ELSE<{
      s3 POP
      s5 POP	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1 prize3=0
    }>
    s3 PUSH	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1 prize3=0 winners_count3
    0 GTINT	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1 prize3=0 _149
    IF:<{	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1 prize3=0
      DROP	//  comsa winners lucky_nums prize2 next_round_fund winners_count3 pf3 prize1
      s1 s2 PUXC	//  comsa winners lucky_nums prize2 next_round_fund prize1 pf3 pf3 winners_count3
      DIV	//  comsa winners lucky_nums prize2 next_round_fund prize1 pf3 prize3
      s3 s3 XCHG2	//  comsa winners lucky_nums prize2 prize3 prize1 next_round_fund pf3
      SUB	//  comsa winners lucky_nums prize2 prize3 prize1 next_round_fund
      s0 s2 XCHG	//  comsa winners lucky_nums prize2 next_round_fund prize1 prize3
    }>ELSE<{
      2 2 BLKDROP2	//  comsa winners lucky_nums prize2 next_round_fund prize1 prize3
    }>
    NEWDICT	//  comsa winners lucky_nums prize2 next_round_fund prize1 prize3 _152
    s1 s3 XCHG	//  comsa winners lucky_nums prize2 prize3 prize1 next_round_fund _152
    pack_round CALLDICT	//  comsa winners lucky_nums prize2 prize3 prize1 round
    s3 s3 s5 XCHG3	//  comsa round lucky_nums prize1 prize2 prize3 winners
    pack_old_round CALLDICT	//  comsa round old_round
    ROT	//  round old_round comsa
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_cell in_msg
    SWAP	//  msg_value in_msg in_msg_cell
    CTOS	//  msg_value in_msg cs
    4 LDU	//  msg_value in_msg flags cs
    LDMSGADDR	//  msg_value in_msg flags _53 _52
    DROP	//  msg_value in_msg flags s_addr
    SWAP
    1 PUSHINT	//  msg_value in_msg s_addr flags _12=1
    AND	//  msg_value in_msg s_addr _13
    s2 PUSH	//  msg_value in_msg s_addr _13 in_msg
    SEMPTY	//  msg_value in_msg s_addr _13 _14
    OR	//  msg_value in_msg s_addr _15
    IFJMP:<{	//  msg_value in_msg s_addr
      3 BLKDROP	// 
    }>	//  msg_value in_msg s_addr
    SWAP	//  msg_value s_addr in_msg
    32 LDU	//  msg_value s_addr op in_msg
    OVER	//  msg_value s_addr op in_msg op
    0 EQINT	//  msg_value s_addr op in_msg _21
    IFJMP:<{	//  msg_value s_addr op in_msg
      NIP	//  msg_value s_addr in_msg
      comment_to_nums CALLDICT	//  msg_value s_addr nums ok
      IFNOTJMP:<{	//  msg_value s_addr nums
        3 BLKDROP	// 
      }>	//  msg_value s_addr nums
      CTOS	//  msg_value s_addr _25
      s1 s2 XCHG
      0 PUSHINT	//  s_addr msg_value _25 _26=0
      buy_ticket CALLDICT
    }>	//  msg_value s_addr op in_msg
    OVER	//  msg_value s_addr op in_msg op
    1 EQINT	//  msg_value s_addr op in_msg _29
    IFJMP:<{	//  msg_value s_addr op in_msg
      NIP	//  msg_value s_addr in_msg
      s1 s2 XCHG
      0 PUSHINT	//  s_addr msg_value in_msg _30=0
      buy_ticket CALLDICT
    }>	//  msg_value s_addr op in_msg
    OVER	//  msg_value s_addr op in_msg op
    2 EQINT	//  msg_value s_addr op in_msg _33
    IFJMP:<{	//  msg_value s_addr op in_msg
      2 1 BLKDROP2	//  msg_value in_msg
      ENDS
      sponsor_prize_fund CALLDICT
    }>	//  msg_value s_addr op in_msg
    s3 POP	//  in_msg s_addr op
    DUP	//  in_msg s_addr op op
    3 EQINT	//  in_msg s_addr op _37
    IFJMP:<{	//  in_msg s_addr op
      DROP	//  in_msg s_addr
      SWAP	//  s_addr in_msg
      ENDS
      0 PUSHINT	//  s_addr _39=0
      withdraw_prize CALLDICT
    }>	//  in_msg s_addr op
    s2 POP	//  op s_addr
    OVER
    31 PUSHPOW2	//  op s_addr op _43
    AND	//  op s_addr _44
    IFNOTJMP:<{	//  op s_addr
      32 PUSHPOW2DEC	//  op s_addr _45=4294967295
      0 PUSHINT	//  op s_addr _45=4294967295 _46=0
      DUP	//  op s_addr _45=4294967295 _46=0 _47=0
      s3 s4 XCHG
      s1 s3 s0 XCHG3
      64 PUSHINT	//  s_addr _45=4294967295 _46=0 op _47=0 _48=64
      send_message_back CALLDICT
    }>	//  op s_addr
    2DROP	// 
  }>
  recv_external PROC:<{
    //  in_msg
    9 PUSHPOW2	//  in_msg _3=512
    LDSLICEX	//  signature in_msg
    DUP	//  signature in_msg cs
    32 LDU	//  signature in_msg _9 cs
    32 LDU	//  signature in_msg _9 _12 cs
    32 LDU	//  signature in_msg msg_seqno valid_until op cs
    NOW	//  signature in_msg msg_seqno valid_until op cs _19
    s1 s3 XCHG	//  signature in_msg msg_seqno cs op valid_until _19
    LEQ	//  signature in_msg msg_seqno cs op _20
    35 THROWIF
    load_data CALLDICT	//  signature in_msg msg_seqno cs op round old_round comsa seqno owner
    s7 s1 XCPU	//  signature in_msg owner cs op round old_round comsa seqno msg_seqno seqno
    EQUAL	//  signature in_msg owner cs op round old_round comsa seqno _29
    33 THROWIFNOT
    s0 s7 XCHG	//  signature seqno owner cs op round old_round comsa in_msg
    HASHSU	//  signature seqno owner cs op round old_round comsa _32
    s0 s8 s6 XC2PU	//  comsa seqno owner cs op round old_round _32 signature owner
    CHKSIGNU	//  comsa seqno owner cs op round old_round _33
    34 THROWIFNOT
    ACCEPT
    s2 PUSH	//  comsa seqno owner cs op round old_round op
    2 EQINT	//  comsa seqno owner cs op round old_round _37
    IF:<{	//  comsa seqno owner cs op round old_round
      s3 PUSH	//  comsa seqno owner cs op round old_round cs
      ENDS
      conduct_round CALLDICT	//  comsa seqno owner cs op round old_round round_comsa
      s1 s7 XCHG	//  old_round seqno owner cs op round comsa round_comsa
      ADD	//  old_round seqno owner cs op round comsa
      s0 s6 XCHG	//  comsa seqno owner cs op round old_round
    }>	//  comsa seqno owner cs op round old_round
    s0 s2 XCHG	//  comsa seqno owner cs old_round round op
    3 EQINT	//  comsa seqno owner cs old_round round _43
    IF:<{	//  comsa seqno owner cs old_round round
      s0 s2 XCHG	//  comsa seqno owner round old_round cs
      264 PUSHINT	//  comsa seqno owner round old_round cs _50
      LDSLICEX	//  comsa seqno owner round old_round dest_addr_s cs
      ENDS
      SWAP
      19 PUSHINT
      0 PUSHINT
      -1 PUSHINT
      ROT
      s0 s3 XCHG
      s0 s8 XCHG
      2 PUSHINT	//  old_round seqno owner round dest_addr_s _53=19 _54=0 _55=-1 comsa _56=2
      send_message_back CALLDICT
      0 PUSHINT	//  old_round seqno owner round comsa=0
      s0 s4 XCHG	//  comsa=0 seqno owner round old_round
    }>ELSE<{
      s2 POP	//  comsa seqno owner round old_round
    }>
    s0 s3 XCHG	//  comsa old_round owner round seqno
    INC	//  comsa old_round owner round _60
    s4 s0 s4 XCHG3	//  round old_round comsa _60 owner
    save_data CALLDICT
  }>
  seqno PROC:<{
    // 
    load_data CALLDICT	//  _6 _7 _8 _9 _10
    s1 s4 XCHG
    4 BLKDROP	//  seqno
  }>
  prize_fund PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    PLDDICT	//  round
    DUP	//  round round
    ISNULL	//  round _4
    IF:<{	//  round
      DROP	// 
      0 PUSHINT	//  _5=0
    }>ELSE<{	//  round
      CTOS	//  _7
      LDGRAMS
      DROP	//  _5
    }>
  }>
  lucky_nums PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      NEWC	//  _6
      ENDC	//  _7
    }>	//  old_round
    CTOS	//  _9
    PLDDICT	//  lucky_nums
    NEWC	//  lucky_nums res
    -1 PUSHINT	//  lucky_nums res i=-1
    UNTIL:<{
      s2 PUSH
      8 PUSHINT	//  lucky_nums res i lucky_nums _17=8
      DICTUGETNEXT
      NULLSWAPIFNOT2	//  lucky_nums res _25 _24 _26
      s2 POP	//  lucky_nums res f i
      OVER	//  lucky_nums res f i f
      IF:<{	//  lucky_nums res f i
        s0 s2 PUXC	//  lucky_nums i f i res
        8 STU	//  lucky_nums i f res
        s0 s2 XCHG	//  lucky_nums res f i
      }>	//  lucky_nums res f i
      SWAP	//  lucky_nums res i f
      NOT	//  lucky_nums res i _22
    }>	//  lucky_nums res i
    DROP
    NIP	//  res
    ENDC	//  _23
  }>
  winners PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  _2
    SKIPDICT	//  _3
    PLDDICT	//  old_round
    DUP	//  old_round old_round
    ISNULL	//  old_round _5
    IFJMP:<{	//  old_round
      DROP	// 
      0 PUSHINT	//  _6=0
      s0 s0 PUSH2	//  _6=0 _7=0 _8=0
      NEWDICT	//  _6=0 _7=0 _8=0 _9
    }>	//  old_round
    CTOS	//  _11
    SKIPDICT	//  ds
    LDGRAMS	//  _17 ds
    LDGRAMS	//  _17 _19 ds
    LDGRAMS	//  _17 _19 _21 ds
    LDDICT	//  _17 _19 _21 _32 _31
    DROP	//  prize1 prize2 prize3 winners
  }>
  is_winner PROC:<{
    //  wc addr
    c4 PUSH	//  wc addr _3
    CTOS	//  wc addr _4
    SKIPDICT	//  wc addr _5
    PLDDICT	//  wc addr old_round
    DUP	//  wc addr old_round old_round
    ISNULL	//  wc addr old_round _7
    IFJMP:<{	//  wc addr old_round
      3 BLKDROP	// 
      0 PUSHINT	//  _8=0
    }>	//  wc addr old_round
    CTOS	//  wc addr _10
    SKIPDICT	//  wc addr ds
    LDGRAMS	//  wc addr _16 ds
    LDGRAMS	//  wc addr _16 _18 ds
    LDGRAMS	//  wc addr _16 _18 _20 ds
    LDDICT	//  wc addr _16 _18 _20 _54 _53
    DROP	//  wc addr prize1 prize2 prize3 winners
    s1 s5 XCHG
    8 PUSHINT	//  prize3 addr prize1 prize2 wc winners _26=8
    DICTIGET
    NULLSWAPIFNOT	//  prize3 addr prize1 prize2 wc_winners_s f
    IFNOTJMP:<{	//  prize3 addr prize1 prize2 wc_winners_s
      5 BLKDROP	// 
      0 PUSHINT	//  _28=0
    }>	//  prize3 addr prize1 prize2 wc_winners_s
    LDDICT	//  prize3 addr prize1 prize2 _58 _57
    DROP	//  prize3 addr prize1 prize2 wc_winners
    s1 s3 XCHG
    8 PUSHPOW2	//  prize3 prize2 prize1 addr wc_winners _34=256
    DICTUGET
    NULLSWAPIFNOT	//  prize3 prize2 prize1 matched_nums_s f
    IFJMP:<{	//  prize3 prize2 prize1 matched_nums_s
      2 PLDU	//  prize3 prize2 prize1 matched_nums
      DUP	//  prize3 prize2 prize1 matched_nums matched_nums
      1 EQINT	//  prize3 prize2 prize1 matched_nums _40
      IFJMP:<{	//  prize3 prize2 prize1 matched_nums
        s1 s3 XCHG
        3 BLKDROP	//  prize1
      }>	//  prize3 prize2 prize1 matched_nums
      NIP	//  prize3 prize2 matched_nums
      DUP	//  prize3 prize2 matched_nums matched_nums
      2 EQINT	//  prize3 prize2 matched_nums _42
      IFJMP:<{	//  prize3 prize2 matched_nums
        DROP
        NIP	//  prize2
      }>	//  prize3 prize2 matched_nums
      NIP	//  prize3 matched_nums
      3 EQINT	//  prize3 _44
      IFJMP:<{	//  prize3
      }>	//  prize3
      DROP	// 
      0 PUSHINT	//  _45=0
    }>	//  prize3 prize2 prize1 matched_nums_s
    4 BLKDROP	// 
    0 PUSHINT	//  _46=0
  }>
  comsa PROC:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    SKIPDICT	//  _2
    SKIPDICT	//  _3
    LDGRAMS
    DROP	//  _4
  }>
}END>c
