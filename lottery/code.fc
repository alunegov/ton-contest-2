
int preload_grams(slice s) asm "LDGRAMS" "DROP";

;; round, old_round, seqno, owner
_ load_data() {
    slice data_s = get_data().begin_parse();
    var res = (data_s~load_dict(), data_s~load_dict(), data_s~load_uint(32), data_s~load_uint(256));
    data_s.end_parse();
    return res;
}

() save_data(cell round, cell old_round, int seqno, int owner) impure {
    set_data(begin_cell()
        .store_dict(round)
        .store_dict(old_round)
        .store_uint(seqno, 32)
        .store_uint(owner, 256)
        .end_cell());    
}

;; id, prize_fund, participants
_ unpack_round(cell round) {
    if (round.null?()) {
        return (0, 0, new_dict());
    }
    var round_s = round.begin_parse();
    var res = (round_s~load_uint(32), round_s~load_grams(), round_s~load_dict());
    round_s.end_parse();
    return res;
}

cell pack_round(int id, int prize_fund, cell participants) {
    return begin_cell()
        .store_uint(id, 32)
        .store_grams(prize_fund)
        .store_dict(participants)
        .end_cell();
}

(cell, cell) conduct_round(cell round) {
    var (id, prize_fund, participants) = unpack_round(round);

    ;;randomize_lt();

    cell lucky_nums = new_dict();
    ;;lucky_nums~udict_add_builder?(8, 0, begin_cell());
    ;;lucky_nums~udict_add_builder?(8, 1, begin_cell());
    ;;lucky_nums~udict_add_builder?(8, 2, begin_cell());
    int i = 0;
    while (i < 13) {
        randomize_lt();

        var f = lucky_nums~udict_add_builder?(8, rand(99), begin_cell());
        if (f) {
            i += 1;
        }
    }

    int c1 = 0;
    int c2 = 0;
    int c3 = 0;

    cell d1 = new_dict();
    cell d2 = new_dict();
    cell d3 = new_dict();

    int i = -1;
    do {
        (i, var nums, var f) = participants.udict_get_next?(256, i);
        if (f) {
            nums~touch();
            var (n1, n2, n3) = (nums~load_uint(8), nums~load_uint(8), nums~load_uint(8));
            nums.end_parse();

            int ff = 0;
            (_, var f1) = lucky_nums.udict_get?(8, n1);
            if (f1) {
                ff += 1;
            }
            (_, f1) = lucky_nums.udict_get?(8, n2);
            if (f1) {
                ff += 1;
            }
            (_, f1) = lucky_nums.udict_get?(8, n3);
            if (f1) {
                ff += 1;
            }

            if (ff == 3) {
                c3 += 1;
                d3~udict_set_builder(256, i, begin_cell());
            }

            if (ff == 2) {
                c2 += 1;
                d2~udict_set_builder(256, i, begin_cell());
            }

            if (ff == 1) {
                c1 += 1;
                d1~udict_set_builder(256, i, begin_cell());
            }
        }
    } until (~ f);

    int pf3 = prize_fund * 6 / 10;
    int pf2 = prize_fund * 2 / 10;
    int pf1 = prize_fund * 17 / 100;
    int commision = prize_fund * 3 / 100;

    int next_round_fund = prize_fund - commision;

    int p3 = 0;
    int p2 = 0;
    int p1 = 0;
    if (c1 > 0) {
        p1 = pf1 / c1;
        next_round_fund -= pf1;
    }
    if (c2 > 0) {
        p2 = pf2 / c2;
        next_round_fund -= pf2;
    }
    if (c3 > 0) {
        p3 = pf3 / c3;
        next_round_fund -= pf3;
    }

    round = pack_round(id + 1, next_round_fund, new_dict());

    cell old_round = begin_cell()
        .store_dict(lucky_nums)
        .store_grams(p1)
        .store_grams(p2)
        .store_grams(p3)
        .store_dict(d1)
        .store_dict(d2)
        .store_dict(d3)
        .end_cell();

    return (round, old_round);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    var cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    var s_addr = cs~load_msg_addr();

    if ((flags & 1) | in_msg.slice_empty?()) {
        ;; a bounced message, or a simple transfer
        return ();
    }

    int op = in_msg~load_uint(32);

    if (op == 1) {
        ;; add new ticket
        var (wc, addr) = parse_std_addr(s_addr);
        ;;throw_unless(39, wc == 0);
        ;;throw_unless(40, addr == 1);

        var msg_round_id = in_msg~load_uint(32);
        var (n1, n2, n3) = (in_msg~load_uint(8), in_msg~load_uint(8), in_msg~load_uint(8));
        in_msg.end_parse();

        ;; TODO: check for unique nums
        var nums = begin_cell()
            .store_uint(n1, 8)
            .store_uint(n2, 8)
            .store_uint(n3, 8);

        var (round, old_round, seqno, owner) = load_data();

        var (id, prize_fund, participants) = unpack_round(round);

        throw_unless(39, msg_round_id == id);  ;; send_back

        participants~udict_set_builder(256, addr, nums);

        round = pack_round(id, prize_fund + msg_value, participants);

        save_data(round, old_round, seqno, owner);

        return();
    }
    
    if (op == 2) {
        ;; inc prize fund
        in_msg.end_parse();

        var (round, old_round, seqno, owner) = load_data();
        
        var (id, prize_fund, participants) = unpack_round(round);

        round = pack_round(id, prize_fund + msg_value, participants);

        save_data(round, old_round, seqno, owner);

        return();
    }

    ;; if op is non-zero and its higher bit is zero, throw an exception (the message is an unsupported query) to
    ;; bounce message back to sender
    throw_unless(37, (op == 0) | (op & (1 << 31)));
    ;; do nothing for other internal messages    
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    var cs = in_msg;
    var (msg_seqno, valid_until, op) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
    throw_if(35, valid_until <= now());
    var (round, old_round, seqno, owner) = load_data();
    throw_unless(33, msg_seqno == seqno);
    throw_unless(34, check_signature(slice_hash(in_msg), signature, owner));
    accept_message();
    if (op == 1) {
        ;; transfer
        cs~touch();
        while (cs.slice_refs()) {
            var mode = cs~load_uint(8);
            send_raw_message(cs~load_ref(), mode);
        }
        cs.end_parse();
    }
    if (op == 2) {
        ;; conduct round
        cs.end_parse();
        (round, old_round) = conduct_round(round);
    }
    if (op == 3) {
        ;; get commision
    } 
    ;; 9 - op for init
    ;;throw_unless(40, op == 9);
    save_data(round, old_round, seqno + 1, owner);
}

;; Get methods

int seqno() method_id {
    return get_data().begin_parse().skip_dict().skip_dict().preload_uint(32);
}

int prize_fund() method_id {
    cell round = get_data().begin_parse().preload_dict();
    return round.null?() ? 0 : round.begin_parse().skip_bits(32).preload_grams();
}

cell lucky_nums() method_id {
    cell old_round = get_data().begin_parse().skip_dict().preload_dict();
    return old_round.null?() ? begin_cell().end_cell() : old_round.begin_parse().preload_dict();
}

cell lucky_nums2() method_id {
    cell old_round = get_data().begin_parse().skip_dict().preload_dict();
    if (old_round.null?()) {
        return begin_cell().end_cell();
    }
    cell lucky_nums = old_round.begin_parse().preload_dict();
    var res = begin_cell();
    int i = -1;
    do {
        (i, _, var f) = lucky_nums.udict_get_next?(8, i);
        if (f) {
            res~store_uint(i, 8);
        }
    } until (~ f);
    return res.end_cell();
}

(int, int, int, cell, cell, cell) winners() method_id {
    cell old_round = get_data().begin_parse().skip_dict().preload_dict();
    if (old_round.null?()) {
        return (0, 0, 0, new_dict(), new_dict(), new_dict());
    }
    slice old_round_s = old_round.begin_parse().skip_dict();
    var (p1, p2, p3) = (old_round_s~load_grams(), old_round_s~load_grams(), old_round_s~load_grams());
    var (d1, d2, d3) = (old_round_s~load_dict(), old_round_s~load_dict(), old_round_s~load_dict());
    return (p1, p2, p3, d1, d2, d3);
}

int is_winner(int addr) method_id {
    cell old_round = get_data().begin_parse().skip_dict().preload_dict();
    if (old_round.null?()) {
        return 0;
    }
    slice old_round_s = old_round.begin_parse().skip_dict();
    var (p1, p2, p3) = (old_round_s~load_grams(), old_round_s~load_grams(), old_round_s~load_grams());
    var (d1, d2, d3) = (old_round_s~load_dict(), old_round_s~load_dict(), old_round_s~load_dict());
    (_, var f) = d1.udict_get?(256, addr);
    if (f) {
        return p1;
    }
    (_, f) = d2.udict_get?(256, addr);
    if (f) {
        return p2;
    }
    (_, f) = d3.udict_get?(256, addr);
    if (f) {
        return p3;
    }
    return 0;
}
